<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fotsies Technology Blog</title>
    <link>http://fgimian.github.io/index.xml</link>
    <description>Recent content on Fotsies Technology Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Dec 2016 13:52:54 +1100</lastBuildDate>
    <atom:link href="http://fgimian.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How macOS Stores Launchpad Configuration</title>
      <link>http://fgimian.github.io/blog/2016/12/23/how-macos-stores-launchpad-configuration/</link>
      <pubDate>Fri, 23 Dec 2016 13:52:54 +1100</pubDate>
      
      <guid>http://fgimian.github.io/blog/2016/12/23/how-macos-stores-launchpad-configuration/</guid>
      <description>

&lt;p&gt;Launchpad in macOS is definitely one of the most cumbersome apps to setup,
although it can be pretty nice to have setup as it provides a little more
organisation than adding your Applications folder to the Dock.&lt;/p&gt;

&lt;p&gt;The problem up until this point was understanding how it works so that we can
build automation tools around it.  However, this changes today as we explore
the way Launchpad works under tho hood :)&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-the-launchpad-sqlite-database&#34;&gt;Connecting to the Launchpad SQLite Database&lt;/h2&gt;

&lt;p&gt;Launchpad stores all of its data in an SQLite database which you can reach as
follows:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;getconf DARWIN_USER_DIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/com.apple.dock.launchpad/db
sqlite3 --column --header db
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;You may check out the entire database schema using the schema command:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;schema&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h1 id=&#34;launchpad-data-structure&#34;&gt;Launchpad Data Structure&lt;/h1&gt;

&lt;p&gt;The structure of Launchpad data is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── Launchpad (Apps) Root
│   ├── Holding Page
│   ├── Page 1
│   │   ├── App 1
│   │   ├── App 2
│   │   ├── Folder Root
│   │   │   │── Folder Page 1
│   │   │   │   │── App 3
│   │   │   │   └── App 4
│   │   │   └── Folder Page 2
│   │   │       ├── App 5
│   │   │       └── App 6
│   │   └── App 7
│   ├── Page 2
│   └── ...
└── Dashboard (Widgets) Root
    ├── Holding Page
    ├── Page 1
    │   ├── Widget 1
    │   ├── Widget 2
    │   ├── Folder Root
    │   │   │── Folder Page 1
    │   │   │   │── Widget 3
    │   │   │   └── Widget 4
    │   │   └── Folder Page 1
    │   │       ├── Widget 5
    │   │       └── Widget 6
    │   └── Widget 7
    ├── Page 2
    └── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;useful-tables&#34;&gt;Useful Tables&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;dbinfo&lt;/strong&gt; table provides the root id for each type of Launchpad data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;launchpad_root&lt;/strong&gt; is the root id for the main Launchpad apps pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dashboard_root&lt;/strong&gt; is the root id for the Dashboard widget pages&lt;br /&gt;
(accessible by clicking the + icon in Dashboard)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;launchpad_version_root&lt;/strong&gt;: is the root id for Launchpad version metadata&lt;br /&gt;
(this is of least importance to us)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then move onto the tables containing data about each type of object in Launchpad:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;groups&lt;/strong&gt;: contains all available root objects, pages and folders for both
Launchpad and Dashboard.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apps&lt;/strong&gt;: contains all apps available for Launchpad&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;downloading_apps&lt;/strong&gt;: contains all apps currently being downloaded for
Launchpad&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;widgets&lt;/strong&gt;: contains all widgets available for Dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the &lt;strong&gt;items&lt;/strong&gt; table references these 3 tables and contains ordering
and parent assocations.&lt;/p&gt;

&lt;h2 id=&#34;walkthrough&#34;&gt;Walkthrough&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;dbinfo&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;1
2
3
4
5
6
7
8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqlite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;%_root%&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;key&lt;/span&gt;                             &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;     
&lt;span class=&#34;c1&#34;&gt;------------------------------  ----------&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;launchpad_root&lt;/span&gt;                  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;dashboard_root&lt;/span&gt;                  &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;         
&lt;span class=&#34;n&#34;&gt;launchpad_version_root&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;       
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;apps&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqlite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; 
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;                                   
&lt;span class=&#34;c1&#34;&gt;----------  ----------------------------------------&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Password&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;                             
&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;Ableton&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Live&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Suite&lt;/span&gt;                    
&lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;Affinity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Designer&lt;/span&gt;                       
&lt;span class=&#34;mi&#34;&gt;22&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;Affinity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Photo&lt;/span&gt;                          
&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;Android&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Transfer&lt;/span&gt;                   
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqlite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;widgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;                                   
&lt;span class=&#34;c1&#34;&gt;----------  ----------------------------------------&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;           &lt;span class=&#34;n&#34;&gt;Calculator&lt;/span&gt;                              
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;           &lt;span class=&#34;n&#34;&gt;Calendar&lt;/span&gt;                                
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;Contacts&lt;/span&gt;                                
&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;          &lt;span class=&#34;k&#34;&gt;Dictionary&lt;/span&gt;                              
&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;ESPN&lt;/span&gt;                                    
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;groups&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqlite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;                                   
&lt;span class=&#34;c1&#34;&gt;----------  ----------------------------------------&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;                                                   
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;                                                   
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;                                                   
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;                                                   
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;                                                   
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;                                                   
&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;                                                 
&lt;span class=&#34;mi&#34;&gt;129&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;Other&lt;/span&gt;                                   
&lt;span class=&#34;mi&#34;&gt;130&lt;/span&gt;                                                 
&lt;span class=&#34;mi&#34;&gt;134&lt;/span&gt;                                                 
&lt;span class=&#34;mi&#34;&gt;135&lt;/span&gt;                                                 
&lt;span class=&#34;mi&#34;&gt;136&lt;/span&gt;                                                 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;OK, so dbinfo, apps and widgets are clear, but the groups not so much.  We know
that groups 1, 3 and 5 are root groups (as shown by the dbinfo table), and 129
looks like a folder, but we still don&amp;rsquo;t know what the rest are just yet.&lt;/p&gt;

&lt;p&gt;Now, we&amp;rsquo;re about to look at the &lt;strong&gt;items&lt;/strong&gt; table which ties all of this
information together.  Before we take a look at items, it&amp;rsquo;s important that
some concepts are explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rowid primary / foreign keys&lt;/strong&gt;: The items table contains a &lt;strong&gt;rowid&lt;/strong&gt;
attribute which is its primary key.  However, it is also a foreign key to
the apps, widgets and groups tables.  What this means is that ids are unique
across all of these three tables.  So for example, if an app has an id of
11, then it is impossible for a widget or group to also use this id.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: Due to the fact that the rowid may reference one of 3 tables, the
items table uses a field called &lt;strong&gt;type&lt;/strong&gt; which specifies what type of object
the respective item references.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The types are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;groups table&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt;: root&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;/strong&gt;: folder root&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3&lt;/strong&gt;: page or folder page&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apps table&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;4&lt;/strong&gt;: app&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;downloading_apps table&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5&lt;/strong&gt;: downloading app&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;widgets table&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;6&lt;/strong&gt;: widget&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing all these things, let&amp;rsquo;s now take a look at all groups in the items
table:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqlite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;                                   &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-------  -------------------------------------  ------  ---------  --------&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ROOTPAGE&lt;/span&gt;                               &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ROOTPAGE_DB&lt;/span&gt;                            &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ROOTPAGE_VERS&lt;/span&gt;                          &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;HOLDINGPAGE&lt;/span&gt;                            &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B95AB89&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;409&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A5EE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B017F90294EE&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;134&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;A63E0500&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C4FA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B55B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A39B579359E&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;135&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;CEB3A866&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DD0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B8E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A842&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E7AB95D42DF&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;HOLDINGPAGE_DB&lt;/span&gt;                         &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;136&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D94ABA2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E715&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;440&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF41&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A2870EDDF19F&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;HOLDINGPAGE_VERS&lt;/span&gt;                       &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;span class=&#34;mi&#34;&gt;129&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;1518232&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A329&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CB3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;849&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FF30800331&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;        &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;      
&lt;span class=&#34;mi&#34;&gt;130&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;F9BE4BE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;F73E&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DF6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A3A7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;864&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E4A64971F&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;129&lt;/span&gt;        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: DB refers to Dashboard and VERS refers to Version.&lt;/p&gt;

&lt;p&gt;OK, so let&amp;rsquo;s attempt to break this down.  We start with our root objects (as
also referenced in the dbinfo table):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rowid    uuid                                   type    parent_id  ordering
-------  -------------------------------------  ------  ---------  --------
1        ROOTPAGE                               1       0          0       
3        ROOTPAGE_DB                            1       0          0       
5        ROOTPAGE_VERS                          1       0          0       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s start with the root id 1 (Launchpad) and check out all the pages which have a parent_id referencing it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rowid    uuid                                   type    parent_id  ordering
-------  -------------------------------------  ------  ---------  --------
2        HOLDINGPAGE                            3       1          0       
128      9B95AB89-78C9-409A-A5EE-B017F90294EE   3       1          1       
134      A63E0500-C4FA-4D12-B55B-2A39B579359E   3       1          2       
135      CEB3A866-8DD0-4B8E-A842-8E7AB95D42DF   3       1          3       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we have the holding page first, and 3 pages with ids of 128, 134 and 135
respectively.  Please also note that unlike apps and widgets, the ordering of
the actual page content starts at 1 due to the holding page occupying ordering
of 0.&lt;/p&gt;

&lt;p&gt;Similarly, let&amp;rsquo;s check out root id 3 (Dashboard) and all pages having it as
as a parent_id:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rowid    uuid                                   type    parent_id  ordering
-------  -------------------------------------  ------  ---------  --------
4        HOLDINGPAGE_DB                         3       3          0       
136      6D94ABA2-E715-440E-AF41-A2870EDDF19F   3       3          1       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, a holding page and a single page with an id of 136.&lt;/p&gt;

&lt;p&gt;We next check out the Launchpad version root of 5 which just contains a
holding page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rowid    uuid                                   type    parent_id  ordering
-------  -------------------------------------  ------  ---------  --------
6        HOLDINGPAGE_VERS                       3       5          0       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, we check out the &lt;strong&gt;Other&lt;/strong&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rowid    uuid                                   type    parent_id  ordering
-------  -------------------------------------  ------  ---------  --------
129      1518232C-A329-4CB3-849E-42FF30800331   2       128        18      
130      0F9BE4BE-F73E-4DF6-A3A7-864E4A64971F   3       129        0       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the folder root has an id of 129 and is present on the page with an id
of 128 (i.e. page 1).  As seen earlier when examining the groups table,
the folder name is contained on the folder root object.&lt;/p&gt;

&lt;p&gt;The first page of the folder has an id of 130.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s check out the item relating to one of our apps 1Password, which had
an id of 9 as seen above in the apps table:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;1
2
3
4
5
6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqlite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt;                                   &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-------  -------------------------------------  ------  ---------  --------&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;        &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CFDC5B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;F420&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FFC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A034&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AA0A897B7A3A&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;134&lt;/span&gt;        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;       
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;So this item has a parent_id of 134 (which is on 2).  The ordering is set to 0
which implies that it is the first item on page 2 (which indeed is the case
when examining Launchpad).&lt;/p&gt;

&lt;p&gt;Another bigger query you can run to see all items and their associations
is as follows:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app_title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;widgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;widget_title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_title&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;LEFT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apps&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;LEFT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;widgets&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;widgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;LEFT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ROOTPAGE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;HOLDINGPAGE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                         &lt;span class=&#34;s1&#34;&gt;&amp;#39;ROOTPAGE_DB&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;HOLDINGPAGE_DB&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                         &lt;span class=&#34;s1&#34;&gt;&amp;#39;ROOTPAGE_VERS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;HOLDINGPAGE_VERS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This will show you each item along with the related app, widget or group
title.  The item type indicates which field will contain a title.&lt;/p&gt;

&lt;h2 id=&#34;triggers&#34;&gt;Triggers&lt;/h2&gt;

&lt;p&gt;The SQLite database contains various triggers which set the ordering of
of items when an item is added, updated or deleted.&lt;/p&gt;

&lt;p&gt;This for example allows you to insert rows into the items table with
specifying the ordering and have the database automatically set ordering of the
item to be the last on that page.&lt;/p&gt;

&lt;p&gt;You may disable this trigger by setting a key called
&lt;strong&gt;ignore_items_update_triggers&lt;/strong&gt; in the dbinfo table as follows:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;You may enable it again by setting the value to 0:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Please find below the most important triggers and some comments about
how they work:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- Action: An item has been inserted to the items table.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- Processing: Sets the ordering to the maximum ordering + 1 on the page&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--             or folder where the item was added.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- Notes: You can&amp;#39;t insert an item at an ordering of 0 (i.e. first item on&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--        a page), it appears that you must move it to a new page (i.e.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--        via an update) to do that.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TRIGGER&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insert_item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AFTER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ifnull&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ROWID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- Action: An item has been moved to the right.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- Processing: Sets the ordering of all items between the original and new&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--             position of the item to move left by 1.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TRIGGER&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;update_items_order&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BEFORE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;OF&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BETWEEN&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- Action: An item has been moved to the left.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- Processing: Sets the ordering of all items between the original and new&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--             position of the item to move right by 1.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TRIGGER&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;update_items_order_backwards&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BEFORE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;OF&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BETWEEN&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- Action: An item has been moved to a different page or folder.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- Processing: Sets the ordering to the maximum ordering + 1 on the page&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--             where the item was moved.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TRIGGER&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;update_item_parent&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AFTER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;OF&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ifnull&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ROWID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ROWID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- Action: An item has been deleted.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- Processing: Deletes any related app, group, widget or dowloading app with&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--             the item of the item.  The trigger then moves all items after&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--             the deleted item left by 1.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TRIGGER&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item_deleted&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AFTER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apps&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;widgets&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;downloading_apps&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rowid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ordering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dbinfo&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore_items_update_triggers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id=&#34;closing-words&#34;&gt;Closing Words&lt;/h2&gt;

&lt;p&gt;I am currently working on a little Python script which will allow you to
build your Launchpad via a YAML file using my findings.&lt;/p&gt;

&lt;p&gt;One of the trickiest things to deal with are the triggers and seeing as how
no trigger really allows ordering to be set to 0, I think that any automation
tools should disable triggers while building these tables.&lt;/p&gt;

&lt;p&gt;Further to this, it is important to take care when deleting items as this also
deletes the respective entry from the apps (or widgets) tables which is likely
undesirable.&lt;/p&gt;

&lt;p&gt;Hope this was helpful and Merry Christmas everyone! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Does High Resolution Audio Really Mean?</title>
      <link>http://fgimian.github.io/blog/2016/06/13/what-does-high-resolution-audio-really-mean/</link>
      <pubDate>Mon, 13 Jun 2016 11:00:38 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2016/06/13/what-does-high-resolution-audio-really-mean/</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s a lot of misinformation out there right now relating to so-called
&lt;strong&gt;high resolution audio&lt;/strong&gt;.  Many large companies are now marketing audio
products with this term, including audio systems, phones, headphones and
speakers.&lt;/p&gt;

&lt;p&gt;But what is high resolution audio exactly?  Is it audio that&amp;rsquo;s provided at
a higher sample rate or bit depth than audio CDs?  Is it a particular
frequency balance on headphones?  Is it to do with how the audio was recorded
and mastered?&lt;/p&gt;

&lt;h2 id=&#34;the-real-problem-the-loudness-war&#34;&gt;The Real Problem: The Loudness War&lt;/h2&gt;

&lt;p&gt;What many fail to disclose is that the most fundamental problem with audio
quality today is the way that it&amp;rsquo;s mastered and an issue known as
&lt;a href=&#34;https://en.wikipedia.org/wiki/Loudness_war&#34;&gt;The Loudness War&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apple.com/au/itunes/mastered-for-itunes/&#34;&gt;Mastered for iTunes&lt;/a&gt;
tracks for the most part are unaltered from their original masters.
Even stores like &lt;a href=&#34;http://www.hdtracks.com/&#34;&gt;HDtracks&lt;/a&gt; often sell 24-bit music based on the same master that was released on CD and other digital stores.
However, to give some credit to HDtracks, they are sometimes provided better
masters, which do sound significantly better than the original masters.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know what this war is about, I suggest that you watch the video
&lt;a href=&#34;https://www.youtube.com/watch?v=qUcgg2vMX_s&#34;&gt;What famous producers think about the Loudness Wars&lt;/a&gt;
which explains the problem very clearly and accurately.&lt;/p&gt;

&lt;p&gt;The main points are as follows;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Almost all music released today (particularly in genres such as pop, rock,
EDM and country) are mastered to sound as loud as possible.&lt;/li&gt;
&lt;li&gt;Maximising loudness is usually performed by a combination of dynamics
compression, peak limiting and clipping all of which degrade the original
audio source.&lt;/li&gt;
&lt;li&gt;This is often done because people believe that louder records sell more, even
though this has never really been proven.  In other cases, this is done
to simply conform to what other similar artists are doing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wish I could say that I didn&amp;rsquo;t take part in producing loud masters for
my Sonic Element releases, but much like all other trance artists, I did.
I typically only used clipping on my masters though and avoided any
compression which still lead to my masters sounding dynamic but somewhat
squashed.&lt;/p&gt;

&lt;p&gt;I hope to remedy that soon for any releases I have the rights over.  Keep an
eye on my &lt;a href=&#34;https://twitter.com/sonicelement&#34;&gt;Twitter page&lt;/a&gt; for news about this.&lt;/p&gt;

&lt;p&gt;To give you an idea, here&amp;rsquo;s how my released master of Crossroads looks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/what-does-high-resolution-audio-really-mean/sonic-element-crossroads-original-master.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And here&amp;rsquo;s what it looks like mastered without regard for the loudness war:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/what-does-high-resolution-audio-really-mean/sonic-element-crossroads-studio-master.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In my honest opinion, &lt;em&gt;if mastering engineers continue taking part in the
loudness war, there&amp;rsquo;s almost no point of high resolution formats or even
lossless formats for that matter&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;compression-peak-limiting&#34;&gt;Compression &amp;amp; Peak Limiting&lt;/h3&gt;

&lt;p&gt;To most music-lovers, the word compression is associated with MP3s and other
compressed audio formats.  However, the word compression is also used for
a type of digital signal processing (DSP) known as dynamics processing.&lt;/p&gt;

&lt;p&gt;What compression does is bring down louder parts of audio and bring up
quieter parts so that you may have a more consistent volume throughout.&lt;/p&gt;

&lt;p&gt;While this is a very important technique on individual instruments and
sometimes groups of instruments (e.g. drums), applying moderate to heavy
compression to an entire mix (which is often done during mastering)
usually leads to tracks sounding lifeless and lacking variation
between loud and quiet parts.&lt;/p&gt;

&lt;p&gt;Peak limiting is a significantly more aggressive version of compression,
where the audio is not allowed to exceed a particular threshold set by
the engineer.  Any audio above this threshold will be heavily compressed
back down to ensure it is below the threshold set.&lt;/p&gt;

&lt;h3 id=&#34;clipping&#34;&gt;Clipping&lt;/h3&gt;

&lt;p&gt;Clipping is often used during the mastering process as an even more
extreme version of peak limiting.  With clipping, the signal is
not lowered below the threshold, instead it is allowed to exceed the
threshold which leads to digital flattening of the signal beyond that
point.&lt;/p&gt;

&lt;p&gt;The reason that clipping is often used is that it can lead to louder masters
and preserves transients such as drum hits much better than peak limiting with
the trade-off being more distortion.&lt;/p&gt;

&lt;h2 id=&#34;have-streaming-ebu-r128-changed-the-situation&#34;&gt;Have Streaming &amp;amp; EBU R128 Changed The Situation?&lt;/h2&gt;

&lt;p&gt;Streaming music services such as Spotify and Apple Music have started to change
this landscape recently.  Spotify employs loudness normalisation by default
which calculates the loudness of songs and volume matches them so that loud
masters actually sound dull by comparison to dynamic masters.  Apple Music does
this via an opt-in feature known as
&lt;a href=&#34;https://support.apple.com/en-au/HT201724&#34;&gt;Sound Check&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, Spotify also performs some
&lt;a href=&#34;https://community.spotify.com/t5/Live-Ideas/Desktop-Other-Improve-Spotify-s-volume-normalisation/idi-p/1128406&#34;&gt;extremely low quality peak limiting&lt;/a&gt;
when their loudness normalisation is turned on, so I suggest disabling it.
Apple&amp;rsquo;s Sound Check is a significantly superior implementation.&lt;/p&gt;

&lt;p&gt;The recent &lt;a href=&#34;https://tech.ebu.ch/loudness&#34;&gt;EBU R128&lt;/a&gt; standard for measuring
audio loudness has also given us a much more accurate way to measure a song or
program&amp;rsquo;s loudness and the recent
&lt;a href=&#34;http://www.aes.org/technical/documents/AESTD1004_1_15_10.pdf&#34;&gt;AES TD1004.1.15-10&lt;/a&gt;
recommendation for music and streaming also provides a very good
standard for music loudness.&lt;/p&gt;

&lt;p&gt;Listeners and mastering engineers are more openly talking about the loudness
war and have even started a petition called
&lt;a href=&#34;https://www.change.org/p/music-streaming-services-bring-peace-to-the-loudness-war&#34;&gt;Bring Peace to the Loudness War&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-about-higher-bit-depths-sample-rates&#34;&gt;What About Higher Bit Depths &amp;amp; Sample Rates?&lt;/h2&gt;

&lt;p&gt;Many people suggest that higher resolution audio formats are not important
and that their benefits cannot be perceived by humans.  This is somewhat
true with a few important caveats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Recording&lt;/strong&gt;: Higher resolution formats are extremely beneficial during
recording and mixing.&lt;/p&gt;

&lt;p&gt;Most analog to digital converters which are used to record digital audio
have a dynamic range greater than 16-bit used on CDs and due to the fact
that audio is heavily processed afterwards during mixing, this extra
information can lead to a more transparent sounding track.  This is
particularly important with dynamics processing, where quiet portions of
the recording are brought up in level along with their noise floor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DSP &amp;amp; Synthesis&lt;/strong&gt;: DSP used in signal processing and synthesizers
can be prone to issues at sample rates that extend just beyond our
hearing (e.g. 44.1 kHz).  Many such processors actually use internal
upsampling to process audio at double the sample rate and then convert
it back down again.&lt;/p&gt;

&lt;p&gt;As such, poorly designed DSP and synthesis algorithms (which there are
many) that aren&amp;rsquo;t upsampled do sound inferior at lower sample rates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Downsampling&lt;/strong&gt;: Recording at a higher sample rate requires you to
downsample when producing a 16-bit / 44.1 kHz version for CD and most digital
sites.&lt;/p&gt;

&lt;p&gt;If you record at exactly double the target sample rate (e.g. 88.2 kHz),
this is far less prone to issues as you can downsample the original
recording more transparently.  However, when downsampling 96 kHz to
44.1 kHz, you must approximate sample values based on their neighbours.
There is &lt;a href=&#34;http://src.infinitewave.ca/&#34;&gt;an entire site&lt;/a&gt; dedicated to
testing sample converters and not all are made equal.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dithering&lt;/strong&gt;: Recording at a higher bit depth requires you to dither the
audio when converting to a lower bit depth.&lt;/p&gt;

&lt;p&gt;Although not quite as troublesome as sample rate conversion, dithering
algorithms and variables such as noise shaping can play a role in the
quality of the resulting audio.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;If care is taken, a 16-bit / 44.1 kHz master can sound every bit as good as
the final studio master.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, with even many consumer DACs supporting 24-bit / 96 kHz these days
and internet speeds getting faster and faster, there&amp;rsquo;s absolutely no harm in
distributing higher resolution formats.  But they won&amp;rsquo;t necessarily sound
better unless the dithering and/or sample rate conversion used is of a
particularly low quality.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I would take a well mastered 16-bit / 44 kHz master over a clipped
24-bit / 96 kHz master any day of the week&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-about-compressed-audio-formats&#34;&gt;What About Compressed Audio Formats?&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s also a huge amount of debate on whether lossless formats such as
FLAC and ALAC sound better than high-bitrate lossy MP3, OGG and AAC files.&lt;/p&gt;

&lt;p&gt;Personally, I find 320 kbps LAME MP3, OGG and Apple AAC encoded files
completely indistinguishable from the original source.  However, I encourage
you to take a FLAC file you own, convert it to the desired format you wish
to compare against and perform a true blind AB comparison using something
like &lt;a href=&#34;http://www.foobar2000.org/components/view/foo_abx&#34;&gt;foobar2000&amp;rsquo;s ABX Comparator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you can genuinely pass this test, then you have exceptional hearing
and should opt for lossless audio if you can.&lt;/p&gt;

&lt;p&gt;Similarly to the point above, there&amp;rsquo;s absolutely no harm in having a lossless
version of your music.  Storage is cheap and bandwidth is readily available,
so I would always choose a lossless file over a lossy file given the choice.
But it&amp;rsquo;s nothing worth losing sleep over.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I would take a well mastered 320 bkps MP3 master over a clipped lossless
master any day of the week&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;so-then-what-is-high-resolution-audio&#34;&gt;So Then What Is High Resolution Audio?&lt;/h2&gt;

&lt;p&gt;To me, high resolution audio is first and foremost audio that has not been
mastered using dynamics compressors, peak limiters or clippers.  It is music
that has been well written, produced, mixed and mastered.&lt;/p&gt;

&lt;p&gt;I believe that an audio system or phone is high resolution if it offers a
clean and flat frequency response when reproducing the source with no
noticeable noise.&lt;/p&gt;

&lt;p&gt;Unless a pair of headphones or speakers contain a DAC built in, their claim to
be &lt;strong&gt;high resolution&lt;/strong&gt; is quite confusing.&lt;/p&gt;

&lt;p&gt;Headphones and speakers which are close to having a neutral (flat) frequency
response, excellent stereo imaging, fast transient response and excellent
detail are what I consider to be high resolution.&lt;/p&gt;

&lt;p&gt;At what point does a pair of headphones or speakers become &lt;em&gt;high resolution&lt;/em&gt;?  I&amp;rsquo;d say at the point which studio engineers feel that they are a good second
reference for their mixes and masters.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s hope that we see a dramatic shift in mastering over the next 5 - 10 years
and we all realise that we have destroyed decades of music for no apparently
good reason.&lt;/p&gt;

&lt;p&gt;Feel free to ask questions and engage in &lt;em&gt;friendly&lt;/em&gt; discussions on this topic
below :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Web Assets Using Shell Scripts</title>
      <link>http://fgimian.github.io/blog/2016/04/03/building-web-assets-using-shell-scripts/</link>
      <pubDate>Sun, 03 Apr 2016 19:21:21 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2016/04/03/building-web-assets-using-shell-scripts/</guid>
      <description>&lt;p&gt;With the various pre-processed languages used for web (e.g. Coffeescript,
LESS .etc), we often reach for tools like &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;,
&lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt; and &lt;a href=&#34;http://brunch.io/&#34;&gt;Brunch&lt;/a&gt;.  However,
what if we could just strip it back to basics and use a shell script?
This could potentially save you the entire Node.js stack if you only plan to
use SCSS (via LibSass).&lt;/p&gt;

&lt;p&gt;Firstly, we&amp;rsquo;re going to need to run both our development server (for the
respective framework) and one or more other commands to watch and pre-process
files.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Convert SIGINT and SIGTERM to an EXIT signal to avoid duplicate traps&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt; INT TERM

&lt;span class=&#34;c1&#34;&gt;# Kill all processes in the current process group&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;kill 0&amp;#39;&lt;/span&gt; EXIT

&lt;span class=&#34;c1&#34;&gt;# Run the web server in the background (e.g. Hugo)&lt;/span&gt;
hugo server &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Run various commands to watch and compile files&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# TODO: add appropriate commands here&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Wait for all background processes to complete&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This solution will allow us to run as many processes as required
and see their output all combined in one window.  As soon as you
hit Ctrl+C, all background processes will be stopped automatically.&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;re going to need a tool which can watch for changes in files
and compile them when they change.  For this, we&amp;rsquo;ll use
&lt;a href=&#34;http://emcrisostomo.github.io/fswatch/&#34;&gt;fswatch&lt;/a&gt; which is written
in C, extremely fast and easy to install on OS X with
&lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install fswatch
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;For the sake of this demonstration, I&amp;rsquo;m going to use sassc to
compile Twitter&amp;rsquo;s Bootstrap.  So let&amp;rsquo;s install this first:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install sassc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Using fswatch is extremely easy, for example:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4
5
6
7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fswatch -0 vendor/bootstrap-sass/assets/stylesheets &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r -d &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; path
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Re-building Bootstrap CSS (due to change in &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&amp;quot;&lt;/span&gt;
  sassc --style compressed &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    vendor/bootstrap-sass/assets/stylesheets/_bootstrap.scss &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    public/css/bootstrap.css
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;So let&amp;rsquo;s break this down.  We start by watching the stylsheets directory for
any changes and output null separated filenames when they change.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fswatch -0 vendor/bootstrap-sass/assets/stylesheets
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Next up, we read entry by entry separated by null and save the result into the
shell script variable &lt;code&gt;$path&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; -r -d &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; path
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We can make this even a little neater using an alias and little bash function:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4
5
6
7
8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Helpers&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;shopt&lt;/span&gt; -s expand_aliases
&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;on_change&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;while IFS= read -r -d &amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;
monitor&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;-i&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;\0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; shift&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  fswatch -0 &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;I have implemented a little extra feature above.  As well as running fswatch,
you may optionally specify &lt;code&gt;-i&lt;/code&gt; to the &lt;code&gt;monitor&lt;/code&gt; function and this will trigger
a refresh as soon as you start your script to ensure everything is up to date
before you start developing.&lt;/p&gt;

&lt;p&gt;Now, we can write watchers as follows:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4
5
6
7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;monitor -i vendor/bootstrap-sass/assets/stylesheets &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; on_change path
&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Re-building Bootstrap CSS (due to change in &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&amp;quot;&lt;/span&gt;
  sassc --style compressed &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    vendor/bootstrap-sass/assets/stylesheets/_bootstrap.scss &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    public/css/bootstrap.css
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Of course, if you&amp;rsquo;re using a tool that contains a watch option, you may
simply add that command followed by an &amp;amp; to run that in the background too.&lt;/p&gt;

&lt;p&gt;Each one of these commands will create a sub-process to the shell script and
be terminated when you hit Ctrl-C.&lt;/p&gt;

&lt;p&gt;Have fun bashing away :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://fgimian.github.io/page/about/</link>
      <pubDate>Sat, 02 Apr 2016 17:25:36 +1100</pubDate>
      
      <guid>http://fgimian.github.io/page/about/</guid>
      <description>&lt;p&gt;My name is Fotis (pronounced Foti) and I work in a DevOps team in a large organisation residing in Australia.&lt;/p&gt;

&lt;p&gt;In my spare time, I love playing with technology, coding and building servers. In addition, I listen to lots and lots of music and am really into audio gear.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Windows 10 on a Mac without Bootcamp</title>
      <link>http://fgimian.github.io/blog/2016/03/12/installing-windows-10-on-a-mac-without-bootcamp/</link>
      <pubDate>Sat, 12 Mar 2016 18:34:00 +1100</pubDate>
      
      <guid>http://fgimian.github.io/blog/2016/03/12/installing-windows-10-on-a-mac-without-bootcamp/</guid>
      <description>

&lt;p&gt;Installing Windows on a Mac should be a piece of cake with Bootcamp, but that
rarely is the case.  In fact, I would personally say that Boot Camp Assistant
is one of the worst apps that comes with OS X and unlike the rest, it doesn&amp;rsquo;t
work seamlessly.&lt;/p&gt;

&lt;p&gt;A few of its drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It only supports a drive with a single partition.&lt;/li&gt;
&lt;li&gt;It often throws very obscure error messages with limited detail.&lt;/li&gt;
&lt;li&gt;It re-downloads 1.6 GB Windows drivers every single time it runs.  These are
placed under &lt;code&gt;/Library/Application Support/BootCamp/WindowsSupport.dmg&lt;/code&gt; and
deleted and re-downloaded each time Boot Camp Assistant starts processing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post did take a lot of work to complie and I did bone my hard drive a
few times while trying certain ideas, so please throw out a thanks if it
helped you out :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This guide below contains procedures which can potentially
destroy your partitions and data.  I accept no responsibility for such loss so
please proceed at your own risk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (2016-07-20)&lt;/strong&gt;: I have updated this post with further improvements
relating to downloading of Boot Camp drivers and ensuring that a Hybrid MBR is
not used (which would cause issues when installing Windows).&lt;/p&gt;

&lt;h1 id=&#34;what-you-will-need&#34;&gt;What You Will Need&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;An 8 GB or larger USB stick&lt;/li&gt;
&lt;li&gt;A copy of the &lt;a href=&#34;https://www.microsoft.com/en-au/software-download/windows10ISO&#34;&gt;Windows 10 ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A valid Windows 10 license&lt;/li&gt;
&lt;li&gt;A downloaded copy of &lt;a href=&#34;https://unetbootin.github.io/&#34;&gt;unetbootin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;downloading-boot-camp-drivers&#34;&gt;Downloading Boot Camp Drivers&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Start &lt;strong&gt;Boot Camp Assistant&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Action&lt;/strong&gt; / &lt;strong&gt;Download Windows Support Software&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Choose your &lt;strong&gt;Dowloads&lt;/strong&gt; directory, enter your password and then click
&lt;strong&gt;Save&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will be the only step that we will use Boot Camp Assistant for.&lt;/p&gt;

&lt;h1 id=&#34;creating-a-bootable-usb-windows-10-installer&#34;&gt;Creating a Bootable USB Windows 10 Installer&lt;/h1&gt;

&lt;h2 id=&#34;formatting-your-usb-stick&#34;&gt;Formatting Your USB Stick&lt;/h2&gt;

&lt;p&gt;Attach your USB stick and start &lt;strong&gt;Disk Utility&lt;/strong&gt;, select your USB drive in the
left panel under External, click &lt;strong&gt;Erase&lt;/strong&gt; and set the options as follows
(exactly) and click &lt;strong&gt;Erase&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;: FAT32&lt;br /&gt;
&lt;strong&gt;Format&lt;/strong&gt;: MS-DOS (FAT)&lt;br /&gt;
&lt;strong&gt;Scheme&lt;/strong&gt;: Master Boot Record&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/disk-utility-erase-disk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;turning-your-usb-stick-into-a-windows-installer&#34;&gt;Turning Your USB Stick into a Windows Installer&lt;/h2&gt;

&lt;p&gt;Open &lt;strong&gt;unetbootin&lt;/strong&gt;, enter your password, set the options as follows and
click &lt;strong&gt;OK&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diskimage&lt;/strong&gt;: checked, set to &lt;strong&gt;ISO&lt;/strong&gt; and browse to your Windows 10 ISO&lt;br /&gt;
&lt;strong&gt;Type&lt;/strong&gt;: USB Drive&lt;br /&gt;
&lt;strong&gt;Drive&lt;/strong&gt;: Your USB drive (you should only see one entry here)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/unetbootin.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you see more than one drive listed, you may confirm which is your USB drive
by opening the &lt;strong&gt;Terminal&lt;/strong&gt; and typing:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;diskutil list FAT32
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;You&amp;rsquo;ll see your USB drive in the output and it should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/dev/disk2 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *16.0 GB    disk2
   1:                 DOS_FAT_32 FAT32                   16.0 GB    disk2s1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have kicked off unetbootin, grab a snack while the Windows ISO is
copied to the USB stick. This process takes around 15 minutes to complete.&lt;/p&gt;

&lt;h2 id=&#34;finishing-up&#34;&gt;Finishing Up&lt;/h2&gt;

&lt;p&gt;When this has completed, you may right click on the USB stick in Finder,
select &lt;strong&gt;Rename &amp;ldquo;FAT32&amp;rdquo;&lt;/strong&gt; and rename it as you like (I&amp;rsquo;ll call mine
&amp;ldquo;WINDOWS 10&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Finally, copy the &lt;strong&gt;WindowsSupport&lt;/strong&gt; in your Downloads directory to
the Windows 10 USB stick so it&amp;rsquo;s easy to get to after our installation.&lt;/p&gt;

&lt;h1 id=&#34;partitioning-your-drive&#34;&gt;Partitioning Your Drive&lt;/h1&gt;

&lt;p&gt;In &lt;strong&gt;Disk Utility&lt;/strong&gt;, select your internal hard drive on the left panel, and
click on &lt;strong&gt;Partition&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button and create a new partition of your desired size for your
Windows installation and name it as you wish (I&amp;rsquo;ll call mine &amp;ldquo;BOOTCAMP&amp;rdquo;).  Ensure that the &lt;strong&gt;Format&lt;/strong&gt; is set to &lt;strong&gt;MS-DOS (FAT)&lt;/strong&gt; and click on &lt;strong&gt;Apply&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/disk-utility-partition-disk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;ensuring-that-a-hybrid-mbr-is-not-used&#34;&gt;Ensuring that a Hybrid MBR is not used&lt;/h1&gt;

&lt;p&gt;Huge thanks to Rod&amp;rsquo;s post from the superuser post titled
&lt;a href=&#34;http://superuser.com/questions/508026/windows-detects-gpt-disk-as-mbr-in-efi-boot&#34;&gt;Windows detects GPT disk as MBR in EFI boot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you add a FAT32 partition with either Boot Camp Assistant or Disk Utility,
your disk is converted into a hybrid GPT / MBR disk which is actually not
supported by newer versions of Windows.  In this step, we revert this
additional change made by Disk Utility by switching back to a pure GPT
partition table.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dowload the latest version of
&lt;a href=&#34;https://sourceforge.net/projects/gptfdisk/files/gptfdisk/&#34;&gt;GPT fdisk&lt;/a&gt;
by browsing to the version, then &lt;strong&gt;gdisk-binaries&lt;/strong&gt; and clicking the file
with the *&lt;strong&gt;.pkg&lt;/strong&gt; extension (e.g. gdisk-1.0.1.pkg).&lt;/li&gt;
&lt;li&gt;Install GPT fdisk by running the installer you downloaded&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a Terminal and check the state of your MBR&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo gdisk /dev/disk0
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;If your MBR partition is set to &lt;strong&gt;hybrid&lt;/strong&gt;, please continue with step 4,
otherwise if it is set to &lt;strong&gt;protective&lt;/strong&gt;, you may skip the rest of this
section.  Simply type &lt;strong&gt;q&lt;/strong&gt; and hit &lt;strong&gt;return&lt;/strong&gt; to exit GPT fdisk.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;strong&gt;p&lt;/strong&gt; to view the existing partition table and verify you&amp;rsquo;re working
on the correct disk&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;strong&gt;x&lt;/strong&gt; to enter the expert menu&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;strong&gt;n&lt;/strong&gt; to create a fresh protective MBR&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;strong&gt;w&lt;/strong&gt; to save your changes and confirm the change when asked&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Type &lt;strong&gt;q&lt;/strong&gt; to exit GPT fdisk&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run GPT fdisk to show your disk layout:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo gdisk -l /dev/disk0
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Your partition table should look something like this:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GPT fdisk &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;gdisk&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; version 1.0.1

Warning: Devices opened with shared lock will not have their
partition table automatically reloaded!
Partition table scan:
  MBR: protective
  BSD: not present
  APM: not present
  GPT: present

Found valid GPT with protective MBR&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; using GPT.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;installing-windows&#34;&gt;Installing Windows&lt;/h1&gt;

&lt;h2 id=&#34;disconnecting-all-devices-from-usb-ports&#34;&gt;Disconnecting All Devices From USB Ports&lt;/h2&gt;

&lt;p&gt;This step is critical as I have had rather serious problems during Windows
installation when certain external drives are connected.&lt;/p&gt;

&lt;p&gt;Unplug everything from your Mac except your keyboard (if wired) and your
bootable Windows USB stick (which we prepared earlier).&lt;/p&gt;

&lt;p&gt;If your Mac contains multiple physical drives, you will need to disconnect
all disks except the one which you intend to install Windows on or you may
encounter the following error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Windows could not prepare the computer to boot into the next phase of installation. To install Windows, restart the installation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;booting-from-the-usb-stick&#34;&gt;Booting From the USB Stick&lt;/h2&gt;

&lt;p&gt;Ensure that the USB stick containing the Windows installer is inserted and
then restart your Mac while holding down the &lt;strong&gt;option (alt)&lt;/strong&gt; key.&lt;/p&gt;

&lt;p&gt;You should now be presented with a list of bootable drives. Select the USB
drive (usually titled &amp;ldquo;EFI Boot&amp;rdquo;) to begin installing Windows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/boot-select-device.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;correcting-your-windows-hard-disk-partition&#34;&gt;Correcting Your Windows Hard Disk Partition&lt;/h2&gt;

&lt;p&gt;When you are asked &lt;strong&gt;Where do you want to install Windows?&lt;/strong&gt;, select the
Windows partition created earlier (which I called &amp;ldquo;BOOTCAMP&amp;rdquo;) and click
&lt;strong&gt;Delete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/windows-install-partition-delete.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select the chunk of &lt;strong&gt;Unallocated Space&lt;/strong&gt; and click on &lt;strong&gt;New&lt;/strong&gt; to create
a proper Windows NTFS partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/windows-install-partition-new.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: OS X only supports creation of FAT filesystems, so this is why we need
to re-create the partition ourselves during install.&lt;/p&gt;

&lt;h2 id=&#34;completing-the-installation&#34;&gt;Completing the Installation&lt;/h2&gt;

&lt;p&gt;Allow the installer to complete and boot into Windows.&lt;/p&gt;

&lt;h2 id=&#34;installing-boot-camp-support-software&#34;&gt;Installing Boot Camp Support Software&lt;/h2&gt;

&lt;p&gt;Once Windows is up and running, install the Boot Camp Support software running
&lt;strong&gt;WindowsSupport/BootCamp/Setup.exe&lt;/strong&gt; on your USB stick.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The installer takes a little while to show up, so please be patient.&lt;/p&gt;

&lt;p&gt;You may encounter a known issue whereby the Boot Camp Support Software
installer locks up while installing Realtek audio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/bootcamp-installer-realtek-freeze.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If this occurs, you will need to open &lt;strong&gt;Task Manager&lt;/strong&gt; and kill the
&lt;strong&gt;RealtekSetup.exe&lt;/strong&gt; process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/bootcamp-installer-realtek-end-process.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the installer has completed, answer &lt;strong&gt;No&lt;/strong&gt; when prompted to reboot
and install the Realtek drivers manually by running
&lt;strong&gt;%USERPROFILE%\AppData\Local\Temp\RarSFX0\BootCamp\Drivers\RealTek\RealtekSetup.exe&lt;/strong&gt;.
If you can&amp;rsquo;t find this file, check any other directories starting with
&lt;strong&gt;RARSFX&lt;/strong&gt; under &lt;strong&gt;%USERPROFILE%\AppData\Local\Temp&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once complete, reboot Windows.&lt;/p&gt;

&lt;h1 id=&#34;what-you-will-need-to-configure-windows&#34;&gt;What You Will Need to Configure Windows&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The latest version of &lt;a href=&#34;https://sharpkeys.codeplex.com/&#34;&gt;SharpKeys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/jamie-pate/flipflop-windows-wheel&#34;&gt;flipflop-windows-sheel binary&lt;/a&gt; (see README for a download link)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;configuring-windows&#34;&gt;Configuring Windows&lt;/h1&gt;

&lt;h2 id=&#34;mapping-your-mac-keyboard&#34;&gt;Mapping Your Mac Keyboard&lt;/h2&gt;

&lt;p&gt;Install and run &lt;strong&gt;SharpKeys&lt;/strong&gt; and then configure the following mappings to
correct your Mac keyboard so that it behaves like a regular Windows keyboard:&lt;/p&gt;

&lt;p&gt;Function: F13 -&amp;gt; Special: PrtSc&lt;br /&gt;
Special: Left Alt =&amp;gt; Special: Left Windows&lt;br /&gt;
Special: Left Windows =&amp;gt; Special: Left Alt&lt;br /&gt;
Special: Right Alt =&amp;gt; Special: Right Windows&lt;br /&gt;
Special: Right Windows =&amp;gt; Special: Right Alt&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/sharpkeys-configuration.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: for F13, you&amp;rsquo;ll need to select &lt;strong&gt;Press a key&lt;/strong&gt; and click F13 on your
keyboard.&lt;/p&gt;

&lt;h2 id=&#34;switching-to-natural-scrolling&#34;&gt;Switching to Natural Scrolling&lt;/h2&gt;

&lt;p&gt;If you wish to flip scrolling direction to match that on OS X, run
&lt;strong&gt;FlipWheel.exe&lt;/strong&gt; and then click on &lt;strong&gt;Flip All&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/flipwheel-configuration.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;enabling-num-lock-on-boot&#34;&gt;Enabling Num Lock on Boot&lt;/h2&gt;

&lt;p&gt;Paste the following into a file named &lt;strong&gt;Enable NumLock on Boot.reg&lt;/strong&gt; then
import this into the registry to enable NumLock when Windows boots up
(it doesn&amp;rsquo;t by default).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Windows Registry Editor Version 5.00

[HKEY_USERS\.DEFAULT\Control Panel\Keyboard]
&amp;quot;InitialKeyboardIndicators&amp;quot;=&amp;quot;80000002&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;completing-configuration&#34;&gt;Completing Configuration&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it, give your machine one last reboot and you&amp;rsquo;ll have a fully working
Windows 10 installation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I have found Apple&amp;rsquo;s Magic Mouse to be extremely unreliable using
the Boot Camp drivers from Apple.  As such, I recommend purchasing a Logitech
(or similar) mouse for use in Windows.  I have no trouble plugging the
wireless receiver for my Logitech mouse into one of the USB ports of my wired
Apple Keyboard and it&amp;rsquo;s so tiny that you can&amp;rsquo;t see it at all.&lt;/p&gt;

&lt;h1 id=&#34;cleaning-up-a-windows-installation&#34;&gt;Cleaning up a Windows Installation&lt;/h1&gt;

&lt;h2 id=&#34;removing-the-windows-partitions&#34;&gt;Removing the Windows Partitions&lt;/h2&gt;

&lt;p&gt;If you decide to remove Windows, you may find that Disk Utility doesn&amp;rsquo;t allow
you to delete the two partitions that have been created by the Windows
installer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/disk-utility-delete-partitions.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This happens due to the fact that the first small partition created is of a
type called &lt;strong&gt;Microsoft Reserved&lt;/strong&gt; which OS X&amp;rsquo;s Disk Utility doesn&amp;rsquo;t support.&lt;/p&gt;

&lt;p&gt;The safest way to delete these partitions is through the Windows installer.  So
simply boot from your USB stick as we did before and when you reach the
&lt;strong&gt;Where do you want to install Windows?&lt;/strong&gt; question, you may delete your
&amp;ldquo;BOOTCAMP&amp;rdquo; partition and the small 16 MB partition of type &lt;strong&gt;MSR (Reserved)&lt;/strong&gt;
just above the BOOTCAMP partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/installing-windows-10-on-a-mac-without-bootcamp/windows-install-partition-clean.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once done, simply quit the installer by clicking the X in the top right corner
of each Window and reboot back into OS X.&lt;/p&gt;

&lt;h2 id=&#34;removing-the-boot-entry&#34;&gt;Removing the Boot Entry&lt;/h2&gt;

&lt;p&gt;Even though we have removed the Windows partition, a boot entry will still be
present when holding down &lt;strong&gt;option (alt)&lt;/strong&gt; during boot.&lt;/p&gt;

&lt;p&gt;You may remove these items by running the following in your &lt;strong&gt;Terminal&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /Volumes/EFI
sudo mount -t msdos /dev/disk0s1 /Volumes/EFI
sudo rm -rfv /Volumes/EFI/EFI/Boot /Volumes/EFI/EFI/Microsoft
sudo umount /Volumes/EFI
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>The Battle of Popular Music Streaming Services</title>
      <link>http://fgimian.github.io/blog/2015/07/04/the-battle-of-popular-music-streaming-services/</link>
      <pubDate>Sat, 04 Jul 2015 15:17:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2015/07/04/the-battle-of-popular-music-streaming-services/</guid>
      <description>

&lt;p&gt;Streaming music services are very mainstream now and really a great step
forward in allowing us all to have exposure to an infinite amount of material
that ultimately allows us to discover and enjoy more music.&lt;/p&gt;

&lt;p&gt;With Apple Music being released just the other day, I wanted to throw my 2
cents in about the main players, Google Play Music All Access (such a long
name), Spotify and Apple Music.&lt;/p&gt;

&lt;h1 id=&#34;google-play-music-all-access&#34;&gt;Google Play Music All Access&lt;/h1&gt;

&lt;p&gt;In my personal opinion (and I completely respect that this a subjective
matter), Google Play Music All Access lacks the polish of the other two
services.&lt;/p&gt;

&lt;p&gt;Here are some of the reasons that I personally ruled it out rather quickly
after starting my trial.  It primarily relates to the exprience on desktops
(Windows and OS X).&lt;/p&gt;

&lt;p&gt;On desktops, there are no official native clients and having the service in a
browser simply isn&amp;rsquo;t the same for me, and here&amp;rsquo;s why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The online version of Google Play All Access Music doesn&amp;rsquo;t appear to support
gapless playback (especially useful for live albums or continous mixes).&lt;/li&gt;
&lt;li&gt;The online version doesn&amp;rsquo;t allow you to store music for offline listening, so
desktop users must stream.&lt;/li&gt;
&lt;li&gt;Having Google Play Music All Access in a browser makes it harder to deal
with on the desktop, it forces you to have a browser open at all times and
just quitting your browser after browsing (a very common practice) means
that you will stop the tunes too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The music selection seemed rather decent to me but these limitations were a
good reason to rule out Google Play Music All Access.  I primarily listen to
music on my desktop and so this was a rather big deal.&lt;/p&gt;

&lt;h1 id=&#34;spotify-vs-apple-music&#34;&gt;Spotify vs Apple Music&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ll start by saying that both these services are awesome and I don&amp;rsquo;t think you
can go wrong with either (unless you&amp;rsquo;re currently an Android user, in which
case you may wish to hold out on Apple Music until the app comes out).&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s just get to the pros of Apple Music over Spotify first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Music videos! (something I find myself watching often now).&lt;/li&gt;
&lt;li&gt;Update videos directly from artists (nice touch).&lt;/li&gt;
&lt;li&gt;Much easier ability to make contents available offline on desktops (Spotify
bizzarly only allows playlists to be made available offline on desktops, not
Your Music).  With Apple Music, I can make my entire music library available
offline in a second.&lt;/li&gt;
&lt;li&gt;Works much more reliably behind a proxy (which many of us are stick with at
work on corporate networks).&lt;/li&gt;
&lt;li&gt;A very generously priced family plan.&lt;/li&gt;
&lt;li&gt;Ability to view items in your library based on Genre.&lt;/li&gt;
&lt;li&gt;iTunes has an awesome mini player which Spotify lacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And on the Spotify end, there are some pros over Apple Music in my opinion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gorgeous dark interface on all platforms (love dark UIs).&lt;/li&gt;
&lt;li&gt;An Android app (with Apple Music coming later this year).&lt;/li&gt;
&lt;li&gt;A more polished collection of music (Apple Music is strangely missing certain
albums and singles from artists, but it seems to be expanding the list
daily).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I&amp;rsquo;m really liking Apple Music so far and favour it a over Spotify.
If Apple can get the music collection to match what&amp;rsquo;s on Spotify and the
Android app is good, then I think it will be my choice going forward.&lt;/p&gt;

&lt;p&gt;What are your thoughts?  Are there any other important factors that make you
choose one over the other?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Simple PlistBuddy Tutorial</title>
      <link>http://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/</link>
      <pubDate>Sat, 27 Jun 2015 20:41:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/</guid>
      <description>&lt;p&gt;Good ol&amp;rsquo; plist files.  They are at the core of OS X for storing application
settings and they work really well.&lt;/p&gt;

&lt;p&gt;If you have ever automated part of your OS X build or changed some cool hidden
feature, you have probably used the &lt;strong&gt;defaults&lt;/strong&gt; command to do so.  The
defaults command is great and is still recommended for simple things, but if
you want to edit complex plist structures like arrays, dicts and nested
structures, you&amp;rsquo;ll inevitably come across PlistBuddy.&lt;/p&gt;

&lt;p&gt;The tool is extremely simple to use and powerful, but due to the lack of
tutorials and guides, I thought I&amp;rsquo;d write one in my own words.&lt;/p&gt;

&lt;p&gt;Start by installing rlwrap to get readline support:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install rlwrap
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And now start Plistbuddy wrapped in readline glory:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rlwrap /usr/libexec/PlistBuddy testing.plist
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This creates a fresh plist file with a dict as its top-level structure.  At any
point, you may type &lt;code&gt;Print&lt;/code&gt; to view the entire structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Print
Dict {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s create a regular item at the top level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Add :Version string 1.0
Command: Print
Dict {
    Version = 1.0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now change it&amp;rsquo;s value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Set :Version 1.1
Command: Print
Dict {
    Version = 1.1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up, we&amp;rsquo;ll create an array and push a few items onto it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Add :Applications array
Command: Add :Applications: string app1
Command: Add :Applications: string app2
Command: Add :Applications: string app3
Command: Print
Dict {
    Version = 1.1
    Applications = Array {
        app1
        app2
        app3
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We may also add items to the beginning of the array by inserting at index 0:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Add :Applications:0 string app0a
Command: Add :Applications:0 string app0b
Command: Add :Applications:0 string app0c
Command: Print
Dict {
    Version = 1.1
    Applications = Array {
        app0c
        app0b
        app0a
        app1
        app2
        app3
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, we&amp;rsquo;ll delete an entry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Delete :Applications
Command: Print
Dict {
    Version = 1.1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create a more complex data structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Add :BrainCells integer 5
Command: Add &amp;quot;:Favourite Random Number&amp;quot; real 3.9234
Command: Add :Intelligent bool false
Command: Add :Today date &amp;quot;Sat Jun 27 18:51:00 AEST 2015&amp;quot;
Command: Add :Person dict
Command: Add :Person:Name string &amp;quot;Fotis Gimian&amp;quot;
Command: Add :Person:Occupation string &amp;quot;Geek&amp;quot;
Command: Add :Person:Likes array
Command: Add :Person:Likes: string Potatoes
Command: Add :Person:Likes: string Apple
Command: Add :Person:Likes: string Bouncing
Command: Print
Dict {
    Favourite Random Number = 3.923400
    Version = 1.1
    Person = Dict {
        Likes = Array {
            Potatoes
            Apple
            Bouncing
        }
        Name = Fotis Gimian
        Occupation = Geek
    }
    Intelligent = false
    BrainCells = 5
    Today = Sat Jun 27 18:51:00 AEST 2015
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let me be a little evil and replace my Apple like with Microsoft:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Set :Person:Likes:1 Microsoft
Command: Print
Dict {
    Favourite Random Number = 3.923400
    Version = 1.1
    Person = Dict {
        Likes = Array {
            Potatoes
            Microsoft
            Bouncing
        }
        Name = Fotis Gimian
        Occupation = Geek
    }
    Intelligent = false
    BrainCells = 5
    Today = Sat Jun 27 18:51:00 AEST 2015
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We may also print a subset of a structure by using colons to move further in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Print :Person:Likes
Array {
    Potatoes
    Microsoft
    Bouncing
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may use an index to move into an array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Print :Person:Likes:1
Microsoft
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And naturally, you can delete items at any level using colons to get inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Delete :Person:Likes
Command: Print
Dict {
    Favourite Random Number = 3.923400
    Version = 1.1
    Person = Dict {
        Name = Fotis Gimian
        Occupation = Geek
    }
    Intelligent = false
    BrainCells = 5
    Today = Sat Jun 27 18:51:00 AEST 2015
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may save all your hard work when done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Command: Save
Saving...
Command: Exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These commands may be invoked from the CLI directly using the -c option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➔ /usr/libexec/PlistBuddy -c &amp;quot;Print&amp;quot; testing.plist
Dict {
    Person = Dict {
        Name = Fotis Gimian
        Occupation = Geek
    }
    Intelligent = false
    BrainCells = 5
    Version = 1.1
    Today = Sat Jun 27 18:51:00 AEST 2015
    Favourite Random Number = 3.923400
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to modify plist files provided by applications, you&amp;rsquo;ll need
to provide PlistBuddy the full path name to the file (unlike the defaults
command):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➔ /usr/libexec/PlistBuddy -c &amp;quot;Print :magnification&amp;quot; ~/Library/Preferences/com.apple.dock.plist
true
➔ /usr/libexec/PlistBuddy -c &amp;quot;Set :magnification bool false&amp;quot; ~/Library/Preferences/com.apple.dock.plist
➔ /usr/libexec/PlistBuddy -c &amp;quot;Print :magnification&amp;quot; ~/Library/Preferences/com.apple.dock.plist
false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh and a little tip (after you stretched for that shift key on each command).
The commands (i.e. Print, Set, Add and so on) are case insensitive, so you can
just type them in lowercase.&lt;/p&gt;

&lt;p&gt;Hope this helps someone out there.  Have a good one! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Selecting a Solid Code Editor</title>
      <link>http://fgimian.github.io/blog/2015/06/06/selecting-a-solid-code-editor/</link>
      <pubDate>Sat, 06 Jun 2015 20:09:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2015/06/06/selecting-a-solid-code-editor/</guid>
      <description>

&lt;p&gt;Hello guys, hope everyone is doing well.  I&amp;rsquo;ll start this post by admitting
that I absolutely love Sublime Text and already own a license for it.  But,
I&amp;rsquo;m a curious lad who likes to try new things and therefore I couldn&amp;rsquo;t help
being interested in trying out the slew of new open source and also payware
editors which are popping up.&lt;/p&gt;

&lt;p&gt;As you also can tell, I primarily develop in Python but do a lot of frontend
work too, so CSS and Javascript are of interest.  In addition, there&amp;rsquo;s a little
C, Bash, PHP and Perl thrown in for good measure (mostly for legacy reasons &amp;hellip;
I absolutely despise Perl).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be evaluating the current versions of &lt;a href=&#34;https://atom.io/&#34;&gt;GitHub&amp;rsquo;s Atom&lt;/a&gt;,
&lt;a href=&#34;http://brackets.io/&#34;&gt;Adobe&amp;rsquo;s Brackets&lt;/a&gt;,
&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Microsoft&amp;rsquo;s Code&lt;/a&gt; and
&lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;JetBrains&amp;rsquo; PyCharm&lt;/a&gt; against the features
that I&amp;rsquo;ve come to love in &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please note that this post will continue to be updated as time goes on and
features are added to the various editors.  I&amp;rsquo;m happy to be corrected if I
have missed anything here as I don&amp;rsquo;t yet know all the other editors intimately.&lt;/p&gt;

&lt;h2 id=&#34;features-to-be-evaluated&#34;&gt;Features to be Evaluated&lt;/h2&gt;

&lt;h3 id=&#34;text-manipulation&#34;&gt;Text Manipulation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multiple Cursors&lt;/strong&gt;: The ability to type on multiple lines and also select
instances of a search term and place multiple cursors there&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Join Lines&lt;/strong&gt;: Ability to join multiple lines together easily&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duplicate Lines&lt;/strong&gt;: Make another copy of the current line&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Moving Lines&lt;/strong&gt;: Moving lines up and down&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Changing Case&lt;/strong&gt;: Switching to title case, uppercase and lowercase&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commenting Lines&lt;/strong&gt;: Ability to easily comment out one or more lines&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line Endings&lt;/strong&gt;: Being able to change the default line endings and also
the line endings of the current file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indentation Settings&lt;/strong&gt;: Changing from tab to soft spaces and being able to
change the width&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replace&lt;/strong&gt;: Regular expression support and good highlighting of search terms
as you type&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;general-editing-ide-features&#34;&gt;General Editing &amp;amp; IDE Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Appearance&lt;/strong&gt;: An appealing visual design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (vars)&lt;/strong&gt;: Ability to autocomplete existing variables
and class names with the tab key&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Folding&lt;/strong&gt;: Ability to fold a block of code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spell Checking&lt;/strong&gt;: Built-in spell checking (handy for comments)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Support&lt;/strong&gt;: Reasonable language support (expected languages are
Bash, Python, Ruby, C, C++, PHP, Perl, HTML, Jade, CSS, LESS, SASS,
Javascript, Coffeescript, Puppet, Markdown, SQL, XML, JSON and YAML).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (IDE)&lt;/strong&gt;: Ability to autocomplete library imports and function
definitions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linting&lt;/strong&gt;: Support for linters like flake8, JSHint and so forth&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project View&lt;/strong&gt;: A good project browser which lets you open files using
a keyboard shortcut&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File Tabs &amp;amp; Switching&lt;/strong&gt;: A neat tab implementation (like that of Chrome)
with the ability to cycle through tabs easily&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Split Editing&lt;/strong&gt;: Ideally at least the ability to split horizontally or
vertically for 2 files to be open at the same time (I never have more than
that)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snippets&lt;/strong&gt;: Code snippets which you may insert by typing various keywords&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;: The ability to easily rename variables and classes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command Palette / Go To Anything&lt;/strong&gt;: Ability to use the keyboard to select
menu items&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimap&lt;/strong&gt;: The ability to see an overview of your code that you can scroll
through&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indent Guides&lt;/strong&gt;: Indent guides are very handy for languages like Python
where spacing is critical and for other languages purely for clean coding&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rulers&lt;/strong&gt;: I like to stick with PEP8 standards and generally stick to
lines of a certain length to avoid long lines&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git Change Indicator&lt;/strong&gt;: Ability to see what lines in a file have been
modified since the last commit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web-development&#34;&gt;Web Development&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Emmet&lt;/strong&gt;: We all know and love Emmet for HTML editing so it&amp;rsquo;s a must&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Colours&lt;/strong&gt;: A colour picker for CSS colours and the ability to see the
colour chosen at a glance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;miscellaneous-features&#34;&gt;Miscellaneous Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;: We&amp;rsquo;ve come to expect that editors will work across
Windows, OSX and Linux these days&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensions&lt;/strong&gt;: The ability to extend my editor to taste with 3rd party or
open source extensions is something I&amp;rsquo;ve grown to love and now rely on&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Memory usage, CPU usage, general responsiveness and start
times&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scratch Pads&lt;/strong&gt;: The ability to just exit Sublime Text without having to
save everything that&amp;rsquo;s open is a huge advantage for me and something I rely
on now&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zooming&lt;/strong&gt;: Quick and easy zooming in and out with Ctrl+scrollwheel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;feature-comparison&#34;&gt;Feature Comparison&lt;/h2&gt;

&lt;p&gt;Legend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;√&lt;/strong&gt;: feature exists and is fully functional&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!&lt;/strong&gt;: feature partially exists&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;: feature doesn&amp;rsquo;t exist or is too limited to judge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The symbol will be repeated twice if an extension is required.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Text Manipulation        Sublime   PyCharm    Atom    Brackets    Code
----------------------- --------- --------- --------- --------- ---------
* Multiple Cursors          √         √         √         √         √
* Join Lines                √         √         √         √√        x
* Duplicate Lines           √         √         √         √         √
* Moving Lines              √         √         √         √         √
* Changing Case             √         !         √         √√        x
* Commenting Lines          √         √         √         !         √
* Line Endings              √         √         x         x         !
* Indentation Settings      √         √         !         √         !
* Replace                   √         √         √         √         √

Editing &amp;amp; IDE Features   Sublime   PyCharm    Atom    Brackets    Code
----------------------- --------- --------- --------- --------- ---------
* Appearance                √         !         √         √         √
* Autocomplete (vars)       √         √         √         √√        !
* Code Folding              √         √         √         √         x
* Spell Checking            √         √         √         x         x
* Language Support          √√        √√        √√        √√        !
* Autocomplete (IDE)        !!        √         x         !         !
* Linting                   √√        √         √√        !         x
* Project View              √         √         √         !         !
* File Tabs &amp;amp; Switching     √         √         √         √√        x
* Split Editing             √         √         √         √         !
* Snippets                  √         √         √         !!        !
* Refactoring               !         √         !         x         x
* Command Palette           √         x         √         √√        √
* Minimap                   √         √√        √√        √√        x
* Indent Guides             √         √         √         √√        x
* Rulers                    √         √         √         √√        x
* Git Change Indicator      √√        √         √         !         √

Web Development          Sublime   PyCharm    Atom    Brackets    Code
----------------------- --------- --------- --------- --------- ---------
* Emmet                     √√        √         √√        √√        √
* CSS Colours               !         √         √√        √         √

Miscellaneous Features   Sublime   PyCharm    Atom    Brackets    Code
----------------------- --------- --------- --------- --------- ---------
* Cross-platform            √         √         √         √         √
* Extensions                √         √         √         √         x
* Performance               √         !         !         x         !
* Scratch Pads              √         √         x         x         x
* Zooming                   √         √         √         √√        x
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sublime-text&#34;&gt;Sublime Text&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/selecting-a-solid-code-editor/sublime-text.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following features require extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language Support&lt;/strong&gt;: Extensions for
&lt;a href=&#34;https://packagecontrol.io/packages/Puppet&#34;&gt;Puppet&lt;/a&gt;,
&lt;a href=&#34;https://packagecontrol.io/packages/LESS&#34;&gt;LESS&lt;/a&gt;,
&lt;a href=&#34;https://packagecontrol.io/packages/Sass&#34;&gt;Sass&lt;/a&gt;,
&lt;a href=&#34;https://packagecontrol.io/packages/SCSS&#34;&gt;SCSS&lt;/a&gt;,
&lt;a href=&#34;https://packagecontrol.io/packages/CoffeeScript&#34;&gt;Coffeescript&lt;/a&gt;
and &lt;a href=&#34;https://packagecontrol.io/packages/Jade&#34;&gt;Jade&lt;/a&gt; are required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linting&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://packagecontrol.io/browse/authors/SublimeLinter&#34;&gt;SublimeLinter packages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git Change Indicator&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://packagecontrol.io/packages/GitGutter&#34;&gt;GitGutter package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emmet&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://packagecontrol.io/packages/Emmet&#34;&gt;Emmet package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following features are limited or missing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (IDE)&lt;/strong&gt;: Python autocomplete is implemented rather well by
the &lt;a href=&#34;https://packagecontrol.io/packages/Anaconda&#34;&gt;Anaconda package&lt;/a&gt; but
I&amp;rsquo;m not aware of equivalents for other languages.  I have had nothing but
drama using the popular
&lt;a href=&#34;https://packagecontrol.io/packages/SublimeCodeIntel&#34;&gt;SublimeCodeIntel package&lt;/a&gt;
so I don&amp;rsquo;t consider that a good choice at this stage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;: You may use &lt;em&gt;Expand Selection to Word&lt;/em&gt; to rename variables
(be sure to do this without a selection).  Unfortunately, I&amp;rsquo;m not currently
aware of how one could rename a variable for all files in the project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Colours&lt;/strong&gt;: Although there are packages available such as
&lt;a href=&#34;https://packagecontrol.io/packages/Color%20Highlighter&#34;&gt;Color Highlighter&lt;/a&gt;
and &lt;a href=&#34;https://packagecontrol.io/packages/ColorPicker&#34;&gt;ColorPicker&lt;/a&gt;, the
experience is far less refined than editors like Atom or Code.  The
ColorPicker uses the rather crappy Windows color picker and the highlighter
requires that you save the CSS file before seeing the changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s easy to see why Sublime Text is so popular, it&amp;rsquo;s an amazing editor.  It
mainly lacks in the area of IDE features like full autocompletion for
libraries and refactoring.&lt;/p&gt;

&lt;h3 id=&#34;pycharm&#34;&gt;PyCharm&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/selecting-a-solid-code-editor/pycharm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following features require plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language Support&lt;/strong&gt;: PyCharm is clearly made for primarily for Python, so
it sadly doesn&amp;rsquo;t include any support for PHP or Ruby which have their own
respective products or are part of the flagship IntelliJ product.
A &lt;a href=&#34;https://plugins.jetbrains.com/plugin/4230?pr=idea&#34;&gt;Bash plugin&lt;/a&gt; and
&lt;a href=&#34;https://plugins.jetbrains.com/plugin/1373?pr=&#34;&gt;C/C++ plugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimap&lt;/strong&gt;: Can be enabled through the
&lt;a href=&#34;https://plugins.jetbrains.com/plugin/7275?pr=clion&#34;&gt;CodeGlance plugin&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following features are limited or missing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Changing Case&lt;/strong&gt;: PyCharm allows you to transform text to uppercase and
lowercase, but not title case which may be needed from time to time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Appearance&lt;/strong&gt;: I&amp;rsquo;m not saying that PyCharm is ugly because it&amp;rsquo;s absolutely
not.  But because it&amp;rsquo;s built with Java, it doesn&amp;rsquo;t use native interface
elements and therefore does clearly feel a tad &lt;em&gt;different&lt;/em&gt; compared to
native applications.  The default shortcuts in the application are also
rather non-standard and really need tweaking (e.g. Ctrl+N for new, Ctrl+W
for close and so forth).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command Palette&lt;/strong&gt;: I can&amp;rsquo;t seem to find an equivalent of Sublime Text&amp;rsquo;s
command palette.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: JetBrains is reasonably fast when being used, but it is
a beast, taking close to 1 GB of memory when running and having a rather
long startup time.  You will need a moderately powerful machine to run
and use this IDE.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom&#34;&gt;Atom&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/selecting-a-solid-code-editor/atom.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following features require packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language Support&lt;/strong&gt;: Packages for
&lt;a href=&#34;https://atom.io/packages/language-jade&#34;&gt;Jade&lt;/a&gt; and
&lt;a href=&#34;https://atom.io/packages/language-puppet&#34;&gt;Puppet&lt;/a&gt; are required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linting&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://atom.io/users/AtomLinter&#34;&gt;AtomLinter packages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimap&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://atom.io/packages/minimap&#34;&gt;minimap package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emmet&lt;/strong&gt;: Available via the &lt;a href=&#34;https://atom.io/packages/emmet&#34;&gt;Emmet package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Colours&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://atom.io/packages/color-picker&#34;&gt;Color Picker extension&lt;/a&gt;
and the
&lt;a href=&#34;https://atom.io/packages/atom-color-highlight&#34;&gt;Atom Color Highlight extension&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following features are limited or missing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line Endings&lt;/strong&gt;: The
&lt;a href=&#34;https://atom.io/packages/line-ending-converter&#34;&gt;line-ending-converter&lt;/a&gt;
helps a little here, but still, Atom doesn&amp;rsquo;t allow one to specify the
default line ending or even see what line endings the current file has.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indentation Settings&lt;/strong&gt;: Atom is decent in this regard, it lets you set
defaults but it doesn&amp;rsquo;t make them easy to change specifically for the current
file nor does it make it apparent what the current settings are.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (IDE)&lt;/strong&gt;: No autocomplete for imports or libraries that I
could find across any language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;: Atom actually does an impressive job with this.  Atom&amp;rsquo;s
&lt;em&gt;Select Next&lt;/em&gt; feature will cleverly only select the variable that you&amp;rsquo;ve
chosen neglecting other words which contain the variable name.  The only
reason it didn&amp;rsquo;t get a tick here is that it doesn&amp;rsquo;t cleverly do this
across an entire project sadly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Atom works pretty well but does take a while to start
and seems to lock up completely from time to time when using the &lt;em&gt;Settings&lt;/em&gt;
page and installing packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scratch Pads&lt;/strong&gt;: Sadly, Atom doesn&amp;rsquo;t offer this feature, you must always
save files when exiting the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other&lt;/strong&gt;: Atom doesn&amp;rsquo;t allow you to use a single key to select &lt;em&gt;Save&lt;/em&gt;,
&lt;em&gt;Cancel&lt;/em&gt; or &lt;em&gt;Don&amp;rsquo;t Save&lt;/em&gt; when closing a file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Atom is very impressive and would be the closest alternative to Sublime Text.
The editor does lack in a few areas such as IDE features, scratch pads, line
ending support and has various other relatively minor usability problems.  The
performance problems while in Settings and lack of line endings for me are the
biggest issues with the editor at the moment.&lt;/p&gt;

&lt;h3 id=&#34;brackets&#34;&gt;Brackets&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/selecting-a-solid-code-editor/brackets.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following features require extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Join Lines&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://github.com/hamdanjaveed/Join-Lines&#34;&gt;Join Lines extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Changing Case&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://github.com/yasinkuyu/brackets-tools&#34;&gt;Brackets Tools extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (vars)&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://github.com/bigeyex/brackets-wordhint&#34;&gt;WordHint extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Support&lt;/strong&gt;: Extensions for
&lt;a href=&#34;https://github.com/ForbesLindesay/jade-brackets&#34;&gt;Jade&lt;/a&gt; and
&lt;a href=&#34;https://github.com/nextrevision/brackets-puppet-syntax&#34;&gt;Puppet&lt;/a&gt;
are required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File Tabs &amp;amp; Switching&lt;/strong&gt;: Requires an extension such as
&lt;a href=&#34;https://github.com/DH3ALEJANDRO/custom-work-for-brackets&#34;&gt;Tabs - Custom Working&lt;/a&gt;
and the &lt;a href=&#34;https://github.com/peterflynn/brackets-editor-nav&#34;&gt;File Navigation Shortcuts&lt;/a&gt;
extension with some customised keyboard shortcuts to work as expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command Palette&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://github.com/peterflynn/brackets-commands-guide&#34;&gt;Brackets Commands Quick Search extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimap&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://github.com/zorgzerg/brackets-minimap&#34;&gt;Minimap extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indent Guides&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://github.com/lkcampbell/brackets-indent-guides&#34;&gt;Indent Guides extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rulers&lt;/strong&gt;: Available via the
&lt;a href=&#34;https://github.com/lkcampbell/brackets-ruler&#34;&gt;Column Ruler extension&lt;/a&gt;
although this did seem a little buggy, but I got it working after some
mucking about.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emmet&lt;/strong&gt;: Available via the &lt;a href=&#34;http://emmet.io/&#34;&gt;Emmet extension&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zooming:&lt;/strong&gt; Available via the
&lt;a href=&#34;https://github.com/denis-gorin/brackets_zw&#34;&gt;Zoom wheel extension&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following features are limited or missing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Commenting Lines&lt;/strong&gt;: Brackets lets you comment lines but it doesn&amp;rsquo;t do it
neatly like Atom and Sublime do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g. let&amp;rsquo;s comment out the print statement here&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Fotis&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello there&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Sublime Text&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Fotis&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# print &amp;#39;Hello there&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Atom&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Fotis&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# print &amp;#39;Hello there&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Brackets&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Fotis&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#    print &amp;#39;Hello there&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line Endings&lt;/strong&gt;: I can&amp;rsquo;t find a way to view, set or change the default line
endings in Brackets at all.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spell Checking&lt;/strong&gt;: An extension exists which attempts to implement this but
it&amp;rsquo;s not realtime and suggestions are not available via right click (only
via Ctrl+Space).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git Change Indicator&lt;/strong&gt;: This is partially supported via the
&lt;a href=&#34;https://github.com/zaggino/brackets-git&#34;&gt;Brackets Git extension&lt;/a&gt; but
changes are only visible upon save.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (IDE)&lt;/strong&gt;: Brackets includes IDE-like features for several
languages and it does it rather well, but the list of languages is not
extensive and doesn&amp;rsquo;t include Python.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linting&lt;/strong&gt;: Although Brackets does have some linting plugins, they don&amp;rsquo;t
seem to be uniform or of good quality like those offered in Atom and Sublime
Text.  As an example, the flake8 plugin appears not to be realtime and I
couldn&amp;rsquo;t get it working when I tried.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project View&lt;/strong&gt;: Works well but only allows you to view one project at a
time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snippets:&lt;/strong&gt; Several extensions exist which attempt to bring this into
Brackets but they seem to offer limited language support.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;: Partially possible but suffers the same problem as
Sublime Text using the &lt;em&gt;Add Next Match to Selection&lt;/em&gt; operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git Change Indicator&lt;/strong&gt;: There&amp;rsquo;s a &lt;a href=&#34;https://github.com/zaggino/brackets-git&#34;&gt;Brackets Git extension&lt;/a&gt;
but it forces you to save the file before updated Git indicators are shown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: I&amp;rsquo;m sorry to say that Brackets felt very slow, even on my
specced out system.  File switching is painfully slow when the minimap,
ruler and indent guide extensions are activated (but rather good without
them).  The editor takes a little to start up.  The entire editor feels slow
in general compared to the rest.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scratch Pads&lt;/strong&gt;: Sadly, Brackets doesn&amp;rsquo;t offer this feature, you must always
save files when exiting the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brackets has an extremely limited core and requires loads of plugins to become
useful.  Thankfully, there is a great community behind the editor who has
contributed many extensions which improve the editor.  However, with the
exception of the excellent IDE-style features provided for CSS, Javascript and
HTML, Brackets generally falls short as an editor.&lt;/p&gt;

&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://fgimian.github.io/img/selecting-a-solid-code-editor/code.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following features are limited or missing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Join Lines&lt;/strong&gt;: There&amp;rsquo;s no way to join lines in this editor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Changing Case&lt;/strong&gt;: Surprisingly, there&amp;rsquo;s no way to change case!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line Endings&lt;/strong&gt;: You may change line endings for the current file but there
doesn&amp;rsquo;t seem to be a way to set default line endings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indentation Settings&lt;/strong&gt;: Code allows you to set a default tab size
but doesn&amp;rsquo;t seem to provide a way to view or change the setting for the
current file and for various languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (vars)&lt;/strong&gt;: This only works in certain languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Folding&lt;/strong&gt;: No code folding support is provided.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spell Checking&lt;/strong&gt;: No spell checker appears to be included out of the box.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Support&lt;/strong&gt;: There&amp;rsquo;s limited language support out of the box,
languages such as Puppet and C are missing for example.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete (IDE)&lt;/strong&gt;: Code really shines here, it has an amazing
autocomplete (what they call IntelliSense) experience, but it only works
on a limited set of languages sadly, and Python isn&amp;rsquo;t one of them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linting&lt;/strong&gt;: No linting support appears to exist out of the box.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project View&lt;/strong&gt;: The project view is great but only allows for one project
to be open at a time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File Tabs &amp;amp; Switching&lt;/strong&gt;: Switching files is quite painful in this editor,
there&amp;rsquo;s no tab bar, and there doesn&amp;rsquo;t seem to be a way to move to the next
and previous file accurately.  In fact, half the time, I don&amp;rsquo;t know what
files are even open.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Split Editing&lt;/strong&gt;: Code only allows you to split the screen horizontally (
above and below) but not vertically (left and right).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snippets&lt;/strong&gt;: The editor offers snippets for a limited set of languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;: No refactoring support appears to exist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimap&lt;/strong&gt;: No minimap is available.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indent Guides&lt;/strong&gt;: No option to enable indent guides.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rulers&lt;/strong&gt;: No option to enable rulers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensions&lt;/strong&gt;: No extension support yet, but it
&lt;a href=&#34;http://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7752408-plugin-system&#34;&gt;seems to be coming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Code performs extremely well compared to the other
Javascript-script based editors and overall is very snappy.  But compared to
Sublime Text, it is a little less responsive which is why it didn&amp;rsquo;t quite
get the tick.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scratch Pads&lt;/strong&gt;: Sadly, Code doesn&amp;rsquo;t offer this feature, you must always
save files when exiting the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zooming&lt;/strong&gt;: No ability to zoom with Ctrl+scrollwheel.  You can however use
Ctrl and + to zoom in.  You can&amp;rsquo;t zoom out beyond the original font size
though.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other&lt;/strong&gt;: Code doesn&amp;rsquo;t allow you to use a single key to select &lt;em&gt;Save&lt;/em&gt;,
&lt;em&gt;Cancel&lt;/em&gt; or &lt;em&gt;Don&amp;rsquo;t Save&lt;/em&gt; when closing a file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, we have many great choices here.  Personally, I feel that Brackets
probably fell shortest of the bunch when considering it&amp;rsquo;s been around for a
little while.  Code shows great promise but is still rather young and lacks
some basic functionality and extension support.&lt;/p&gt;

&lt;p&gt;My picks as of June 2015 are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IDE&lt;/strong&gt;: PyCharm (but you&amp;rsquo;ll need a beefy machine)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor&lt;/strong&gt;: Sublime Text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternative Editor&lt;/strong&gt;: Atom (open source and free)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Running nose tests with plugins using the setuptools test command</title>
      <link>http://fgimian.github.io/blog/2014/04/27/running-nose-tests-with-plugins-using-the-setuptools-test-command/</link>
      <pubDate>Sun, 27 Apr 2014 11:28:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2014/04/27/running-nose-tests-with-plugins-using-the-setuptools-test-command/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://nose.readthedocs.org/en/latest/&#34;&gt;nose&lt;/a&gt; Python test framework is a
really good choice for writing and running your tests.  However, it seems that
the author is
&lt;a href=&#34;https://code.google.com/p/python-nose/issues/detail?id=219&#34;&gt;deprecating the use of nose.collector&lt;/a&gt;
which was used when running the &lt;strong&gt;test&lt;/strong&gt; setuptools command:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Furthermore, even in its current form, the nose collector doesn&amp;rsquo;t correctly
work with plugins such as
&lt;a href=&#34;http://nedbatchelder.com/code/coverage/&#34;&gt;coverage.py&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://nose.readthedocs.org/en/latest/setuptools_integration.html&#34;&gt;recommended way&lt;/a&gt;
is to use the &lt;strong&gt;nosetests&lt;/strong&gt; setuptools command instead.  Though, this presents
several problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The nosetests setuptools command is not recognised unless nose is installed&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The only way to ensure that nose is installed is using the &lt;strong&gt;setup_requires&lt;/strong&gt;
directive&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2
3
4
5
6
7
8
9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;setup_requires&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;nose&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;coverage&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;mock&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using the setup_requires directive means that every time a user installs your
package using pip, they must also download all the setup dependencies, which
they don&amp;rsquo;t actually need to use the library.  The setup_requires dependencies
are not installed, but is still a waste of time and bandwidth for our users.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how do we get around this?  We create a custom &lt;strong&gt;test&lt;/strong&gt; command!  This is
based on
&lt;a href=&#34;https://pytest.org/latest/goodpractises.html#integration-with-setuptools-test-commands&#34;&gt;py.test&amp;rsquo;s excellent example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;setup.py&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;setuptools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;setuptools.command.test&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TestCommand&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# Inspired by the example at https://pytest.org/latest/goodpractises.html&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NoseTestCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;finalize_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;TestCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalize_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test_suite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run_tests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# Run nose ensuring that argv simulates running nosetests directly&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;nose&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;nose&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;nosetests&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tests_require&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;nose&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;coverage&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;mock&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cmdclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoseTestCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And there we have it, a custom test command which runs our nose tests after
test dependencies are installed.  This combats all the problems mentioned above
and also correctly detects plugins in setup.cfg.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the setup.cfg for my &lt;a href=&#34;https://github.com/fgimian/painter&#34;&gt;Painter&lt;/a&gt;
project which I tested with:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cfg&#34; data-lang=&#34;cfg&#34;&gt;1
2
3
4
5
6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;[nosetests]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;detailed-errors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;with-coverage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;cover-package&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;painter&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;cover-erase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;verbosity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In the future, I&amp;rsquo;ll likely be switching to &lt;a href=&#34;http://pytest.org/&#34;&gt;py.test&lt;/a&gt; as my
test runner anyway due its improved assert introspection.  But for now, this
will get me by.&lt;/p&gt;

&lt;p&gt;Hope this is helpful :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Better Python version and environment management with pyenv</title>
      <link>http://fgimian.github.io/blog/2014/04/20/better-python-version-and-environment-management-with-pyenv/</link>
      <pubDate>Sun, 20 Apr 2014 09:27:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2014/04/20/better-python-version-and-environment-management-with-pyenv/</guid>
      <description>&lt;p&gt;In the
&lt;a href=&#34;http://fgimian.github.io/blog/2012/12/08/setting-up-virtual-development-environments-for-python/&#34;&gt;Setting up Virtual Development Environments for Python&lt;/a&gt;
post, we discussed the use of
&lt;a href=&#34;https://github.com/utahta/pythonbrew&#34;&gt;pythonbrew&lt;/a&gt; for managing Python versions
and their related virtualenvs.  If you do enjoy pythonbrew, then be sure to
check out &lt;a href=&#34;https://github.com/saghul/pythonz&#34;&gt;pythonz&lt;/a&gt; which is now the active
fork of the original project and has resolved almost all issues that I had
originally reported.&lt;/p&gt;

&lt;p&gt;However, there is another alternative called
&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;pyenv&lt;/a&gt; which has several significant
advantages.  Probably one of the biggest is the fact that pyenv doesn&amp;rsquo;t depend
on Python 2.6+ to be installed.  Many OSs (e.g. SLES 10 and CentOS 5) come with
Python 2.4 pre-installed.  In addition, pyenv implements automatic switching of
Python version or virtualenv based on the directory you&amp;rsquo;re in.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s get started!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using &lt;strong&gt;CentOS&lt;/strong&gt;, install all build dependencies as follows:&lt;/p&gt;

&lt;p&gt;Firstly, ensure you install EPEL if you&amp;rsquo;re on CentOS 5.x:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -O http://mirror.iprimus.com.au/epel/5/i386/epel-release-5-4.noarch.rpm
rpm -Uvh epel-release-5-4.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Now install the build dependencies:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install git gcc zlib-devel bzip2-devel readline-devel sqlite-devel openssl-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;If you&amp;rsquo;re using &lt;strong&gt;Ubuntu Server&lt;/strong&gt;, install all build dependencies like this:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install curl git-core gcc make zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libssl-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Now install pyenv as a regular user:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -L https://raw.github.com/yyuu/pyenv-installer/master/bin/pyenv-installer &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Once installation completes, you&amp;rsquo;ll be presented with some code that should be
added to your &lt;strong&gt;~/.bashrc&lt;/strong&gt; file:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4
5
6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PYENV_ROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.pyenv&amp;quot;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PYENV_ROOT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PYENV_ROOT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;pyenv init -&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Simply add this code to the end of your ~/.bashrc and then source your profile
to have these additions loaded.&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;CentOS&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;On &lt;strong&gt;Ubuntu Server&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.profile
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: pyenv fully supports bash completion, so be sure to use your tab key
when typing commands to help auto-complete them.&lt;/p&gt;

&lt;p&gt;To list all available Python versions, use:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install -l
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;To install a Python version, use:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install &amp;lt;version&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install 2.7.6
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;To list the installed Python versions, use:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv versions
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Virtual environments will also show up as versions after they&amp;rsquo;re
added.&lt;/p&gt;

&lt;p&gt;To set the global Python version used for your account, use:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv global &amp;lt;version&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Creating virtualenvs is also easy and extremely well integrated into pyenv:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv virtualenv &amp;lt;name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;You may activate and de-activate virtualenvs using:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv activate &amp;lt;name&amp;gt;
pyenv deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;To see all the virtualenvs you have created, you may use:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv virtualenvs
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;OK here comes the great part.  Suppose we&amp;rsquo;re working on a project which we know
always uses a virtualenv called &lt;strong&gt;project123&lt;/strong&gt;.  While in the root of the
project directory, you may set the appropriate Python environment that should
always be used while in the project directory.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &amp;lt;virtualenv or version&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Now each time you enter this directory, the chosen virtualenv or Python version
will be activated automatically!  The file that is creatied and specifies the
appropriate environment is named &lt;strong&gt;.python-version&lt;/strong&gt; and should be added to
your repository.&lt;/p&gt;

&lt;p&gt;At any time, you may view the Python environment being used:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv version
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Finally, you can remove a Python version or virtualenv using the uninstall
commend:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv uninstall &amp;lt;virtualenv or version&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s walk through an entire example using my
&lt;a href=&#34;https://github.com/fgimian/flaskage&#34;&gt;Flaskage&lt;/a&gt; project.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4
5
6
7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install 2.7.6
pyenv global 2.7.6
pyenv virtualenv flaskage
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; flaskage/
pyenv &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; flaskage
pip install -r requirements.txt
git add .python-version
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This is definitely the way I&amp;rsquo;ll be managing my Python environment from now on
as it&amp;rsquo;s definitely the most elegant solution I have found to date.  Enjoy! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the Python mock library to fake regular functions during tests</title>
      <link>http://fgimian.github.io/blog/2014/04/10/using-the-python-mock-library-to-fake-regular-functions-during-tests/</link>
      <pubDate>Thu, 10 Apr 2014 19:00:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2014/04/10/using-the-python-mock-library-to-fake-regular-functions-during-tests/</guid>
      <description>

&lt;p&gt;While writing unit tests in Python, there will often be times where you&amp;rsquo;ll need
to fake the result of a function as testing against the actual function may be
impossible.  A simple example is a random function since one can&amp;rsquo;t predict what
it will return.  Another could be a database call for a database that&amp;rsquo;s only
available in certain environments.&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s &lt;a href=&#34;https://pypi.python.org/pypi/mock&#34;&gt;mock&lt;/a&gt; library is the de facto
standard when mocking functions in Python, yet I have always struggled to
understand it from the official documentation.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;m going to focus on regular functions.  We&amp;rsquo;ll take a look at
mocking classes and their related properties some time in the future.&lt;/p&gt;

&lt;h2 id=&#34;mocking-functions-using-decorators&#34;&gt;Mocking Functions Using Decorators&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start with the &lt;strong&gt;os.urandom&lt;/strong&gt; function.  We&amp;rsquo;ll begin by writing a mock
function that will act similarly to urandom:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;OK, so now let&amp;rsquo;s use it!&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mock&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestRandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@mock.patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;os.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;side_effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;fffff&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The &lt;strong&gt;side_effect&lt;/strong&gt; keyword argument simply allows you to replace an entire
function with another.  Please also notice that the decorator now adds an
additional argument to the function that it wraps which I&amp;rsquo;ve called
&lt;strong&gt;urandom_function&lt;/strong&gt;.  We&amp;rsquo;ll discuss some of the things you can do with this
later on.&lt;/p&gt;

&lt;p&gt;The code above also works if we were importing a function that used
&lt;strong&gt;os.urandom&lt;/strong&gt; too.&lt;/p&gt;

&lt;p&gt;OK, but what if we imported the urandom function using a from statement?
Well this is a special case where you can use &lt;strong&gt;__main__&lt;/strong&gt; to mock the
function:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mock&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;simple_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestRandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@mock.patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;side_effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;fffff&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Great stuff!  But in many cases, we would be importing a function from a module
that calls urandom directly using a from import.  For example, let&amp;rsquo;s say we had
this function in a module called &lt;strong&gt;fots&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2
3
4
5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;abc_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In this case, we can mock the urandom function in the fots module like this:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mock&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;fots&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abc_urandom&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestRandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@mock.patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fots.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;side_effect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_abc_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abc_urandom_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abc_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;abcfffff&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;At this point, we know how to mock the various types of function calls that may
occur.&lt;/p&gt;

&lt;p&gt;If you would like to perform a much simpler mock and just replace the return
value of the function with a simple expression, you may do this:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@mock.patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;os.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;return_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2 id=&#34;mocking-functions-using-context-managers&#34;&gt;Mocking Functions Using Context Managers&lt;/h2&gt;

&lt;p&gt;For more granular control over when mocking should take place within a test
case, you may use a with statement instead of a decorator as shown below.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;os.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;return_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abc_urandom_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abc_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;abcpumpkins&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;As you can see, the syntax really doesn&amp;rsquo;t change all that much and once again
you&amp;rsquo;ll have the function available within the with statement&amp;rsquo;s scope for
manipulation.&lt;/p&gt;

&lt;h2 id=&#34;using-the-mocked-function-during-tests&#34;&gt;Using the Mocked Function During Tests&lt;/h2&gt;

&lt;p&gt;As mentioned above, using the decorator or context manager provides access to
the mocked function via an additional variable.&lt;/p&gt;

&lt;p&gt;Firstly, we can change the mock function on the fly throughout the test like
this:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mock&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestRandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@mock.patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;os.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_abc_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;return_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;return_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;lemons&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;lemons&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;side_effect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;fffff&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We can also determine if the mock function was called and how many times it was
called.  These particular statistics can be reset using the &lt;strong&gt;reset_mock&lt;/strong&gt;
function.  Please see an example below:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mock&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestRandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@mock.patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;os.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;return_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_abc_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# The mock function hasn&amp;#39;t been called yet&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;called&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# Here we call the mock function twice and assert that it has been&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# called and the number of times called is 2&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;called&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# Finally, we can reset all function call statistics as though the&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# mock function had never been used&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset_mock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;called&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;You may even determine exactly what parameters the mocked function was called
with:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;unittest&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mock&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestRandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@mock.patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;os.urandom&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;return_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_abc_urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pumpkins&amp;#39;&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# Function was last called with argument 10&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_args&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# All function calls were called with the following arguments&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_args_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_args_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urandom_function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call_args_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Pretty cool huh?&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s easy to see how awesome this library is and why it&amp;rsquo;s now part of the
standard library.  Its implementation is also very Pythonic and elegant.
Hopefully this little guide has gotten you over the hurdles that I first had
to go through while learning it.  Happy mocking! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Headless Browser Testing with Chrome and Firefox</title>
      <link>http://fgimian.github.io/blog/2014/04/06/headless-browser-testing-with-chrome-and-firefox/</link>
      <pubDate>Sun, 06 Apr 2014 21:38:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2014/04/06/headless-browser-testing-with-chrome-and-firefox/</guid>
      <description>&lt;p&gt;When utilising &lt;a href=&#34;http://docs.seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt; to test web
applications, I was always under the impression that
&lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; was the only option for servers without an
X server.  I have nothing but good things to say about PhantomJS and have used
it successfully for testing in the past.  However, while working on some pull
requests for &lt;a href=&#34;https://github.com/cobrateam/splinter&#34;&gt;splinter&lt;/a&gt; recently, I
discovered that Chrome and Firefox can also be configured to do the same thing.&lt;/p&gt;

&lt;p&gt;To begin with, download the
&lt;a href=&#34;https://www.google.com/intl/en/chrome/browser/?platform=linux&#34;&gt;Google Chrome debian package&lt;/a&gt;
using a regular PC and upload it to your server.&lt;/p&gt;

&lt;p&gt;Install Chrome as follows:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install xdg-utils
sudo dpkg -i google-chrome-stable_current_amd64.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In addition to Chrome, you&amp;rsquo;ll also need the
&lt;a href=&#34;https://code.google.com/p/selenium/wiki/ChromeDriver&#34;&gt;Chrome Driver&lt;/a&gt;.
Download this on a regular PC and upload the zip file to your server.&lt;/p&gt;

&lt;p&gt;Now extract it to /usr/bin and set appropriate permissions:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo unzip chromedriver_linux64.zip -d /usr/bin/
sudo chmod &lt;span class=&#34;m&#34;&gt;755&lt;/span&gt; /usr/bin/chromedriver
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Next up, we&amp;rsquo;ll install Firefox:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install firefox
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;To make use of a regular browser in Selenium sessions, we need to install the
&lt;a href=&#34;http://en.wikipedia.org/wiki/Xvfb&#34;&gt;X Virtual Framebuffer&lt;/a&gt; and related fonts:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install xvfb x11-xkb-utils
sudo apt-get install xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Now that everything&amp;rsquo;s installed, you may start up a virtual display.  Each
virtual display has a number.  I&amp;rsquo;ll use display number 99 below to setup our
example display.&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Xvfb :99 &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DISPLAY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;:99
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;An even better way of starting and stopping an xvfb session in your Python code
is with the use of &lt;a href=&#34;https://github.com/cgoldberg/xvfbwrapper&#34;&gt;xvfbwrapper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install it as follows in your virtualenv:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install xvfbwrapper
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And here&amp;rsquo;s some sample code to get you started:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;xvfbwrapper&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Xvfb&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# TODO create your Selenium object and initialise the browser&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;xvfb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Xvfb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;xvfb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# TODO run some selenium tests here&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;xvfb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;OSError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;Error: xvfb cannot be found on your system, please install &amp;#39;&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;it and try again&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# TODO clean up Selenium browser&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Another popular option is
&lt;a href=&#34;https://github.com/ponty/PyVirtualDisplay&#34;&gt;PyVirtualDisplay&lt;/a&gt; but I couldn&amp;rsquo;t
get that working when I tried it.  I&amp;rsquo;ll need to look into why soon.&lt;/p&gt;

&lt;p&gt;xvfbwrapper is robust and has no dependencies so I honestly had no reason to
really pursue PyVirtualDisplay but it&amp;rsquo;s a similar library and worth a look too.&lt;/p&gt;

&lt;p&gt;One of the biggest challenges one may face when testing like this is the
multitude of OS and browser combinations.  On bigger projects where browser and
OS compatibility are very important, you may wish to use a service such as
&lt;a href=&#34;https://saucelabs.com/selenium&#34;&gt;Sauce&lt;/a&gt; to perform your testing. Their service
gives access to over 300 browser/OS combinations and is free for open source
projects.&lt;/p&gt;

&lt;p&gt;Have fun! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essential Python Libraries</title>
      <link>http://fgimian.github.io/blog/2014/03/04/essential-python-libraries/</link>
      <pubDate>Tue, 04 Mar 2014 21:11:00 +1100</pubDate>
      
      <guid>http://fgimian.github.io/blog/2014/03/04/essential-python-libraries/</guid>
      <description>

&lt;p&gt;So in case you haven&amp;rsquo;t noticed &amp;hellip; I&amp;rsquo;m a little (VERY) in love with Python as
a programming language.  I use it for everything now, from web development,
to scripting and everything in between.&lt;/p&gt;

&lt;p&gt;As such, I thought I&amp;rsquo;d put together an article of the many amazing libraries
that I think every Python programmer needs to know about.  Now there&amp;rsquo;s no doubt
in my mind that there are heaps that I&amp;rsquo;ve missed, but we have to start
somewhere.  I&amp;rsquo;ll try to keep revising this article as I come across more great
libraries.&lt;/p&gt;

&lt;h2 id=&#34;web-development&#34;&gt;Web Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/Flask&#34;&gt;Flask&lt;/a&gt;: My web framework of choice right
now.  Don&amp;rsquo;t be fooled by the word &amp;ldquo;micro&amp;rdquo;, this bad boy can do everything
under the sun once you plug in the necessary components.  Be sure to also
check out &lt;a href=&#34;https://pypi.python.org/pypi/Werkzeug&#34;&gt;Werkzeug&lt;/a&gt; and
&lt;a href=&#34;https://pypi.python.org/pypi/Jinja2&#34;&gt;Jinja2&lt;/a&gt; libraries that Flask depends
on.  Werkzeug is a very extensive set of WSGI tools including a full caching
implementation.  Jinja2 is an extremely elegant templating language (and my
personal favourite in Python).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/Django&#34;&gt;Django&lt;/a&gt;: A quality full-stack web
framework with awesome documentation and everything you could need included.
The upcoming addition of database migrations take Django to the next level.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/SQLAlchemy&#34;&gt;SQLAlchemy&lt;/a&gt;: An incredible database
ORM which plugs beautifully into Flask.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/alembic/0.6.3&#34;&gt;Alembic&lt;/a&gt;: Database migrations
for SQLAlchemy written by the developer of SQLAlchemy itself.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/WTForms&#34;&gt;WTForms&lt;/a&gt;: An excellent form validation
library which plugs really nicely into Flask.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/dogpile.cache&#34;&gt;dogpile.cache&lt;/a&gt;: Another
excellent caching library by the author of SQLAlchemy.  Much like Werkzeug,
this supports the &lt;a href=&#34;https://pypi.python.org/pypi/redis&#34;&gt;redis-py&lt;/a&gt;,
&lt;a href=&#34;https://pypi.python.org/pypi/python-memcached&#34;&gt;python-memcached&lt;/a&gt; and
&lt;a href=&#34;https://pypi.python.org/pypi/pylibmc&#34;&gt;pylibmc&lt;/a&gt; libraries.  For use with
memcache, the preference seems to be pylibmc which is mainly written in C
and performs around twice as fast as python-memcached.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/gunicorn&#34;&gt;Gunicorn&lt;/a&gt;: My first choice for
serving WSGI applications.  Absolutely rock solid and performs great.
Also worth checking out are &lt;a href=&#34;https://pypi.python.org/pypi/gevent&#34;&gt;gevent&lt;/a&gt;
and &lt;a href=&#34;https://pypi.python.org/pypi/uWSGI&#34;&gt;uWSGI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web-interaction&#34;&gt;Web Interaction&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/selenium&#34;&gt;Selenium&lt;/a&gt;: A library that allows
you to automate interaction with websites.  I highly recommend the
&lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; web browser for use with Selenium on
servers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/splinter&#34;&gt;splinter&lt;/a&gt;: Although Selenium is
excellent, its API can be quite low level when writing tests.  The splinter
library sits on top of Selenium and provides a clean and simple API for
interacting with websites.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/beautifulsoup4&#34;&gt;Beautiful Soup&lt;/a&gt;: A really easy
to use XML / HTML parsing library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/lxml&#34;&gt;lxml&lt;/a&gt;: A similar library to Beautiful
Soup but with much better performance and arguably a cleaner API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/requests&#34;&gt;Requests&lt;/a&gt;: The most elegant way to
make requests to websites and retrieve responses.  Great for interacting with
APIs and similar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/ansible&#34;&gt;Ansible&lt;/a&gt;: An absolutely awesome build
automation tool which compares favourably to Puppet in many important areas.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/salt&#34;&gt;Salt&lt;/a&gt;: Another Python-based build
automation tool which competes with Puppet and Chef.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/Fabric&#34;&gt;Fabric&lt;/a&gt;: An amazing automation tool for
deploying code, running tasks and interacting with servers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/invoke&#34;&gt;Invoke&lt;/a&gt;: By the developers who brought
us Fabric comes Invoke which will be used by Fabric 2.0 when it&amp;rsquo;s released.
Invoke itself is a very clean and powerful make file replacement in Python
(the equivalent of Rake in Ruby).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/buildbot&#34;&gt;BuildBot&lt;/a&gt;: A build automation system
similar to Jenkins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;testing-tools&#34;&gt;Testing Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/coverage&#34;&gt;Coverage.py&lt;/a&gt;: Allows you to examine
what lines of your code are missing unit tests.  This blew my mind the first
time I came across it! :)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/mock&#34;&gt;mock&lt;/a&gt;: Mock allows you to replace bits of
your system to help with simulating necessary conditions in unit tests.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/nose&#34;&gt;nose&lt;/a&gt;: Enhances the included unittest to
make written tests more elegant and easier to run.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pytest&#34;&gt;pytest&lt;/a&gt;: Another Python unit test
enhancer which adds some helpful features and functionality.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/factory_boy&#34;&gt;factory_boy&lt;/a&gt;: Database fixtures
for testing web applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/fake-factory&#34;&gt;fake-factory&lt;/a&gt;: An awesome library
for generating fake data for testing purposes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/behave&#34;&gt;behave&lt;/a&gt;: A fantastic BDD tool for
Python very similar to &lt;a href=&#34;http://cukes.info/&#34;&gt;Cucumber&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/sure&#34;&gt;sure&lt;/a&gt;: Provides a very human-friendly way
to write tests.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pyshould&#34;&gt;pyshould&lt;/a&gt;: Very similar to sure but
can also be extended with custom assertions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/flake8&#34;&gt;Flake8&lt;/a&gt;: A great tool which combines
PEP8 and PyFlakes to help validate your code.  I use this religiously.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/ipython&#34;&gt;IPython&lt;/a&gt;: A significantly improved
Python shell.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pandas&#34;&gt;pandas&lt;/a&gt;: A library providing a range
of tools for data analysis.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/Pygments&#34;&gt;Pygments&lt;/a&gt;: The reference for syntax
highlighting of code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/python-daemon&#34;&gt;python-daemon&lt;/a&gt;: A library which
makes it much easier to implement a daemon in Python.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/python-dateutil&#34;&gt;python-dateutil&lt;/a&gt;: Some very
handy functions which make working with dates a lot easier.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/PyYAML&#34;&gt;PyYAML&lt;/a&gt;: Allows you to read and write
YAML files seamlessly.  YAML is my preferred format for storing
configurations where possible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/sentry&#34;&gt;Sentry&lt;/a&gt;: A powerful realtime log
aggregation system which collects logs from multiple places and makes them
available via a web interface.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/six&#34;&gt;six&lt;/a&gt;: A very handy library for making code
compatible with both Python 2 and Python 3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/watchdog&#34;&gt;Watchdog&lt;/a&gt;: A library that can watch
for changes to files and take chosen actions when a change is detected.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/supervisor&#34;&gt;Supervisor&lt;/a&gt;: A neat little system
which keeps track of running daemons or processes and takes action if any
failures occur.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please let me know if I&amp;rsquo;ve missed anything obvious guys! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serving a Python Flask Website on Hostmonster</title>
      <link>http://fgimian.github.io/blog/2014/02/14/serving-a-python-flask-website-on-hostmonster/</link>
      <pubDate>Fri, 14 Feb 2014 19:40:00 +1100</pubDate>
      
      <guid>http://fgimian.github.io/blog/2014/02/14/serving-a-python-flask-website-on-hostmonster/</guid>
      <description>&lt;p&gt;Hey there folks, it&amp;rsquo;s been a while!&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;ll be guiding you through setting up Hostmonster (or similar
shared hosting providers) to serve a Python Flask web application.  I&amp;rsquo;ll be
using my new &lt;a href=&#34;https://github.com/fgimian/flaskage&#34;&gt;Flaskage&lt;/a&gt; template project
as the application, but naturally you can adapt this solution to work with any
Flask application.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll create a temporary build directory to put things in:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/build
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/build
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;First, start by building and installing Python on the system:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4
5
6
7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -O http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz
tar xvfz Python-2.7.6.tgz
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; Python-2.7.6
./configure --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/python
make
make install
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And now, for the sake of having binaries like lessc and coffee available,
we&amp;rsquo;ll also install Node.js:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -O http://nodejs.org/dist/v0.10.25/node-v0.10.25-linux-x64.tar.gz
mkdir ~/nodejs
tar xvfz node-v0.10.25-linux-x64.tar.gz -C ~/nodejs --strip 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s now make our new Python and Node.js bin directories the default on the
system.  Just ensure that the PATH variable is set as follows in
&lt;strong&gt;~/.bash_profile&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# User specific environment and startup programs&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/bin:&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/python/bin:&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/nodejs/bin:&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Source the file again and ensure that the system is using our new python binary
and can also find our node binary too:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bash_profile
which python
which node
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Now we&amp;rsquo;ll install pip and virtualenv:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSL http://peak.telecommunity.com/dist/ez_setup.py &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; python
easy_install pip
pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s create a new virtualenv for our application (Flaskage in this case):&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/.virtualenv/
virtualenv ~/.virtualenv/flaskage
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.virtualenv/flaskage/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We&amp;rsquo;re now done with our build directory, so let&amp;rsquo;s clean it up:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~
rm -rfv build/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;I discovered some dramas when cloning via git:// URLs on Hostmonster and
therefore I suggest you force Git to use HTTPS instead:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global url.&lt;span class=&#34;s2&#34;&gt;&amp;quot;https://&amp;quot;&lt;/span&gt;.insteadOf git://
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Ok, we&amp;rsquo;re now ready to clone Flaskage and install all required dependencies:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3
4
5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/fgimian/flaskage.git
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; flaskage/
pip install -r requirements.txt
npm install -g bower less clean-css coffee-script uglify-js
bower install
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We&amp;rsquo;ll also need &lt;strong&gt;flup&lt;/strong&gt; to serve the site via FCGI:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flup
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We&amp;rsquo;re getting really close now.  Our application is completely ready to be
served and all dependencies are installed, so all that&amp;rsquo;s left to do is write
a small FCGI script and .htaccess file.&lt;/p&gt;

&lt;p&gt;Relative to &lt;strong&gt;~/public_html/&lt;/strong&gt;, change into the root directory from which you
wish your website to be served.  If you want the website served starting at /
on your domain, then simply change into public_html, but in my case, I&amp;rsquo;ll serve
the website from /flaskage (e.g. &lt;a href=&#34;http://www.mydomain.com/flaskage&#34;&gt;http://www.mydomain.com/flaskage&lt;/a&gt;).&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/public_html/
mkdir flaskage
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; flaskage/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In this directory, create an FCGI script (I called mine &lt;strong&gt;flaskage.fcgi&lt;/strong&gt;) as
follows:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/home/fots/.virtualenv/flaskage/bin/python&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flup.server.fcgi&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WSGIServer&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/home/fots/flaskage&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;application&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_app&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create_app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;WSGIServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;You&amp;rsquo;ll naturally need to modify this file to suit your application.  The main
things you should modify are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first line should point to the python binary of your virtualenv&lt;/li&gt;
&lt;li&gt;The sys path insert needs to correspond to your application&amp;rsquo;s root directory
(the location where you can import app or your application factory create_app
function)&lt;/li&gt;
&lt;li&gt;The lines relating to the import and creation of app need to be modified
depending on how your application has been built (e.g. if not using
factories, you may simply import your app object and call it a day)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensure you make the FCGI script executable and test that it returns the
homepage of your application:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x flaskage.fcgi
./flaskage.fcgi
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And now for the .htaccess file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddHandler fcgid-script .fcgi
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ flaskage.fcgi/$1 [QSA,L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the last line which should be modified to include the filename of your
FCGI script above.&lt;/p&gt;

&lt;p&gt;Phew, that was a little painful huh?  But you made it!  You should now be able
to browse to
&lt;a href=&#34;http://www.yourdomain.com/flaskage&#34;&gt;http://www.yourdomain.com/flaskage&lt;/a&gt; and
see the Flaskage landing page.&lt;/p&gt;

&lt;p&gt;Keep in mind the complexity behind this landing page.  It has tested that all
the Node.js components and Bower components have worked correctly in addition
to our Python build and virtualenv package setup.&lt;/p&gt;

&lt;p&gt;Naturally, I have my reservations about running a site over FCGI instead of
WSGI, but seriously, it should perform as well as any standard PHP site.
Those running bigger and higher-traffic sites likely have a Linode, Amazon EC2
or other dedicated hosting solution and can deploy their site via Nginx and
WSGI anyway.&lt;/p&gt;

&lt;p&gt;Have a good one! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building an RPM of the Latest OpenSSH on SLES 10 SP3</title>
      <link>http://fgimian.github.io/blog/2013/05/12/building-an-rpm-of-the-latest-openssh-on-sles-10-sp3/</link>
      <pubDate>Sun, 12 May 2013 08:45:00 +1000</pubDate>
      
      <guid>http://fgimian.github.io/blog/2013/05/12/building-an-rpm-of-the-latest-openssh-on-sles-10-sp3/</guid>
      <description>&lt;p&gt;Several years ago, we needed a newer version of OpenSSH on a system we were
building with SLES 10 to enable jailrooting of user accounts.  In this post,
we&amp;rsquo;re going to be building an RPM of the latest OpenSSH for SLES 10 SP3 (and
similar) servers.&lt;/p&gt;

&lt;p&gt;Install the required packages to build OpenSSH as follows:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo zypper -n install gcc
sudo zypper -n install tcpd-devel zlib-devel openssl-devel pam-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Grab the current OpenSSH source:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/src/packages/SOURCES/
wget http://mirror.aarnet.edu.au/pub/OpenBSD/OpenSSH/portable/openssh-6.2p1.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Extract the OpenSSH spec from the archive:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar zxvf openssh-6.2p1.tar.gz --strip &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -C /usr/src/packages/SPECS/ openssh-6.2p1/contrib/suse/openssh.spec
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Update the spec to skip x11 askpass functionality (which we don&amp;rsquo;t need in a
server build without a GUI):&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed &lt;span class=&#34;s2&#34;&gt;&amp;quot;s/\(%define build_x11_askpass.*\)1&lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;/\10/&amp;quot;&lt;/span&gt; /usr/src/packages/SPECS/openssh.spec &amp;gt; /usr/src/packages/SPECS/openssh.spec.tmp
mv /usr/src/packages/SPECS/openssh.spec.tmp /usr/src/packages/SPECS/openssh.spec
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Now build the RPM:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpmbuild -bb /usr/src/packages/SPECS/openssh.spec
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Ensure the build ends successfully:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
+ umask 022
+ cd /usr/src/packages/BUILD
+ cd openssh-6.2p1
+ rm -rf /var/tmp/openssh-6.2p1-buildroot
+ exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally you should have a new RPM under &lt;strong&gt;/usr/src/packages/RPMS/x86_64/&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fots@fotsies-sles-testlab:/usr/src/packages/SOURCES&amp;gt; ls -l /usr/src/packages/RPMS/x86_64/
total 965
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; fots users &lt;span class=&#34;m&#34;&gt;984924&lt;/span&gt; 2013-05-12 20:11 openssh-6.2p1-1.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;All the best! :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>